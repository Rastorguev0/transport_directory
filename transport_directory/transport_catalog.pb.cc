// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport_catalog.proto

#include "transport_catalog.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_transport_5fcatalog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BusEdgeInfo_transport_5fcatalog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transport_5fcatalog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BusGraph_transport_5fcatalog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transport_5fcatalog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BusRequest_transport_5fcatalog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transport_5fcatalog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Edge_transport_5fcatalog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transport_5fcatalog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_EdgeInfo_transport_5fcatalog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transport_5fcatalog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IncidenceList_transport_5fcatalog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transport_5fcatalog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RouteData_transport_5fcatalog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transport_5fcatalog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RouteInternalData_transport_5fcatalog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transport_5fcatalog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Router_transport_5fcatalog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transport_5fcatalog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RoutesInternalData_transport_5fcatalog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transport_5fcatalog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoutingSettings_transport_5fcatalog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transport_5fcatalog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StopRequest_transport_5fcatalog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transport_5fcatalog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StopVertexIdx_transport_5fcatalog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transport_5fcatalog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_TransportRouter_transport_5fcatalog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transport_5fcatalog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VertexInfo_transport_5fcatalog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transport_5fcatalog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WaitEdgeInfo_transport_5fcatalog_2eproto;
namespace Serialize {
class StopRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StopRequest> _instance;
} _StopRequest_default_instance_;
class BusRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BusRequest> _instance;
} _BusRequest_default_instance_;
class EdgeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Edge> _instance;
} _Edge_default_instance_;
class IncidenceListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IncidenceList> _instance;
} _IncidenceList_default_instance_;
class BusGraphDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BusGraph> _instance;
} _BusGraph_default_instance_;
class RouteDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RouteData> _instance;
} _RouteData_default_instance_;
class RouteInternalDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RouteInternalData> _instance;
} _RouteInternalData_default_instance_;
class RoutesInternalDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoutesInternalData> _instance;
} _RoutesInternalData_default_instance_;
class RouterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Router> _instance;
} _Router_default_instance_;
class StopVertexIdxDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StopVertexIdx> _instance;
} _StopVertexIdx_default_instance_;
class VertexInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VertexInfo> _instance;
} _VertexInfo_default_instance_;
class BusEdgeInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BusEdgeInfo> _instance;
} _BusEdgeInfo_default_instance_;
class WaitEdgeInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WaitEdgeInfo> _instance;
} _WaitEdgeInfo_default_instance_;
class EdgeInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EdgeInfo> _instance;
} _EdgeInfo_default_instance_;
class RoutingSettingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoutingSettings> _instance;
} _RoutingSettings_default_instance_;
class TransportRouterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransportRouter> _instance;
} _TransportRouter_default_instance_;
class TransportCatalogDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransportCatalog> _instance;
} _TransportCatalog_default_instance_;
}  // namespace Serialize
static void InitDefaultsscc_info_BusEdgeInfo_transport_5fcatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Serialize::_BusEdgeInfo_default_instance_;
    new (ptr) ::Serialize::BusEdgeInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BusEdgeInfo_transport_5fcatalog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BusEdgeInfo_transport_5fcatalog_2eproto}, {}};

static void InitDefaultsscc_info_BusGraph_transport_5fcatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Serialize::_BusGraph_default_instance_;
    new (ptr) ::Serialize::BusGraph();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BusGraph_transport_5fcatalog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BusGraph_transport_5fcatalog_2eproto}, {
      &scc_info_Edge_transport_5fcatalog_2eproto.base,
      &scc_info_IncidenceList_transport_5fcatalog_2eproto.base,}};

static void InitDefaultsscc_info_BusRequest_transport_5fcatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Serialize::_BusRequest_default_instance_;
    new (ptr) ::Serialize::BusRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BusRequest_transport_5fcatalog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BusRequest_transport_5fcatalog_2eproto}, {}};

static void InitDefaultsscc_info_Edge_transport_5fcatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Serialize::_Edge_default_instance_;
    new (ptr) ::Serialize::Edge();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Edge_transport_5fcatalog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Edge_transport_5fcatalog_2eproto}, {}};

static void InitDefaultsscc_info_EdgeInfo_transport_5fcatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Serialize::_EdgeInfo_default_instance_;
    new (ptr) ::Serialize::EdgeInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_EdgeInfo_transport_5fcatalog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_EdgeInfo_transport_5fcatalog_2eproto}, {
      &scc_info_BusEdgeInfo_transport_5fcatalog_2eproto.base,
      &scc_info_WaitEdgeInfo_transport_5fcatalog_2eproto.base,}};

static void InitDefaultsscc_info_IncidenceList_transport_5fcatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Serialize::_IncidenceList_default_instance_;
    new (ptr) ::Serialize::IncidenceList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IncidenceList_transport_5fcatalog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IncidenceList_transport_5fcatalog_2eproto}, {}};

static void InitDefaultsscc_info_RouteData_transport_5fcatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Serialize::_RouteData_default_instance_;
    new (ptr) ::Serialize::RouteData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RouteData_transport_5fcatalog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RouteData_transport_5fcatalog_2eproto}, {}};

static void InitDefaultsscc_info_RouteInternalData_transport_5fcatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Serialize::_RouteInternalData_default_instance_;
    new (ptr) ::Serialize::RouteInternalData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RouteInternalData_transport_5fcatalog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RouteInternalData_transport_5fcatalog_2eproto}, {
      &scc_info_RouteData_transport_5fcatalog_2eproto.base,}};

static void InitDefaultsscc_info_Router_transport_5fcatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Serialize::_Router_default_instance_;
    new (ptr) ::Serialize::Router();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Router_transport_5fcatalog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Router_transport_5fcatalog_2eproto}, {
      &scc_info_RoutesInternalData_transport_5fcatalog_2eproto.base,}};

static void InitDefaultsscc_info_RoutesInternalData_transport_5fcatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Serialize::_RoutesInternalData_default_instance_;
    new (ptr) ::Serialize::RoutesInternalData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RoutesInternalData_transport_5fcatalog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RoutesInternalData_transport_5fcatalog_2eproto}, {
      &scc_info_RouteInternalData_transport_5fcatalog_2eproto.base,}};

static void InitDefaultsscc_info_RoutingSettings_transport_5fcatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Serialize::_RoutingSettings_default_instance_;
    new (ptr) ::Serialize::RoutingSettings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoutingSettings_transport_5fcatalog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RoutingSettings_transport_5fcatalog_2eproto}, {}};

static void InitDefaultsscc_info_StopRequest_transport_5fcatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Serialize::_StopRequest_default_instance_;
    new (ptr) ::Serialize::StopRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StopRequest_transport_5fcatalog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StopRequest_transport_5fcatalog_2eproto}, {}};

static void InitDefaultsscc_info_StopVertexIdx_transport_5fcatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Serialize::_StopVertexIdx_default_instance_;
    new (ptr) ::Serialize::StopVertexIdx();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StopVertexIdx_transport_5fcatalog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StopVertexIdx_transport_5fcatalog_2eproto}, {}};

static void InitDefaultsscc_info_TransportCatalog_transport_5fcatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Serialize::_TransportCatalog_default_instance_;
    new (ptr) ::Serialize::TransportCatalog();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_TransportCatalog_transport_5fcatalog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_TransportCatalog_transport_5fcatalog_2eproto}, {
      &scc_info_StopRequest_transport_5fcatalog_2eproto.base,
      &scc_info_BusRequest_transport_5fcatalog_2eproto.base,
      &scc_info_TransportRouter_transport_5fcatalog_2eproto.base,}};

static void InitDefaultsscc_info_TransportRouter_transport_5fcatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Serialize::_TransportRouter_default_instance_;
    new (ptr) ::Serialize::TransportRouter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_TransportRouter_transport_5fcatalog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_TransportRouter_transport_5fcatalog_2eproto}, {
      &scc_info_RoutingSettings_transport_5fcatalog_2eproto.base,
      &scc_info_BusGraph_transport_5fcatalog_2eproto.base,
      &scc_info_Router_transport_5fcatalog_2eproto.base,
      &scc_info_StopVertexIdx_transport_5fcatalog_2eproto.base,
      &scc_info_VertexInfo_transport_5fcatalog_2eproto.base,
      &scc_info_EdgeInfo_transport_5fcatalog_2eproto.base,}};

static void InitDefaultsscc_info_VertexInfo_transport_5fcatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Serialize::_VertexInfo_default_instance_;
    new (ptr) ::Serialize::VertexInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VertexInfo_transport_5fcatalog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VertexInfo_transport_5fcatalog_2eproto}, {}};

static void InitDefaultsscc_info_WaitEdgeInfo_transport_5fcatalog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Serialize::_WaitEdgeInfo_default_instance_;
    new (ptr) ::Serialize::WaitEdgeInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WaitEdgeInfo_transport_5fcatalog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WaitEdgeInfo_transport_5fcatalog_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_transport_5fcatalog_2eproto[17];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_transport_5fcatalog_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_transport_5fcatalog_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_transport_5fcatalog_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Serialize::StopRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Serialize::StopRequest, stop_),
  PROTOBUF_FIELD_OFFSET(::Serialize::StopRequest, buses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Serialize::BusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Serialize::BusRequest, bus_),
  PROTOBUF_FIELD_OFFSET(::Serialize::BusRequest, stop_count_),
  PROTOBUF_FIELD_OFFSET(::Serialize::BusRequest, unique_stop_count_),
  PROTOBUF_FIELD_OFFSET(::Serialize::BusRequest, road_length_),
  PROTOBUF_FIELD_OFFSET(::Serialize::BusRequest, geo_road_length_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Serialize::Edge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Serialize::Edge, from_),
  PROTOBUF_FIELD_OFFSET(::Serialize::Edge, to_),
  PROTOBUF_FIELD_OFFSET(::Serialize::Edge, weight_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Serialize::IncidenceList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Serialize::IncidenceList, edge_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Serialize::BusGraph, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Serialize::BusGraph, edges__),
  PROTOBUF_FIELD_OFFSET(::Serialize::BusGraph, incidence_lists__),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Serialize::RouteData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Serialize::RouteData, weight_),
  PROTOBUF_FIELD_OFFSET(::Serialize::RouteData, has_),
  PROTOBUF_FIELD_OFFSET(::Serialize::RouteData, prev_edge_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Serialize::RouteInternalData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Serialize::RouteInternalData, has_),
  PROTOBUF_FIELD_OFFSET(::Serialize::RouteInternalData, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Serialize::RoutesInternalData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Serialize::RoutesInternalData, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Serialize::Router, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Serialize::Router, routes_internal_data__),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Serialize::StopVertexIdx, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Serialize::StopVertexIdx, name_),
  PROTOBUF_FIELD_OFFSET(::Serialize::StopVertexIdx, in_),
  PROTOBUF_FIELD_OFFSET(::Serialize::StopVertexIdx, out_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Serialize::VertexInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Serialize::VertexInfo, stop_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Serialize::BusEdgeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Serialize::BusEdgeInfo, bus_name_),
  PROTOBUF_FIELD_OFFSET(::Serialize::BusEdgeInfo, start_stop_idx_),
  PROTOBUF_FIELD_OFFSET(::Serialize::BusEdgeInfo, finish_stop_idx_),
  PROTOBUF_FIELD_OFFSET(::Serialize::BusEdgeInfo, span_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Serialize::WaitEdgeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Serialize::EdgeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::Serialize::EdgeInfo, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::Serialize::EdgeInfo, variant_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Serialize::RoutingSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Serialize::RoutingSettings, bus_wait_time_),
  PROTOBUF_FIELD_OFFSET(::Serialize::RoutingSettings, bus_velocity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Serialize::TransportRouter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Serialize::TransportRouter, settings__),
  PROTOBUF_FIELD_OFFSET(::Serialize::TransportRouter, graph__),
  PROTOBUF_FIELD_OFFSET(::Serialize::TransportRouter, router__),
  PROTOBUF_FIELD_OFFSET(::Serialize::TransportRouter, stops_vertex_ids__),
  PROTOBUF_FIELD_OFFSET(::Serialize::TransportRouter, vertices_info__),
  PROTOBUF_FIELD_OFFSET(::Serialize::TransportRouter, edges_info__),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Serialize::TransportCatalog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Serialize::TransportCatalog, stops__),
  PROTOBUF_FIELD_OFFSET(::Serialize::TransportCatalog, buses__),
  PROTOBUF_FIELD_OFFSET(::Serialize::TransportCatalog, router__),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Serialize::StopRequest)},
  { 7, -1, sizeof(::Serialize::BusRequest)},
  { 17, -1, sizeof(::Serialize::Edge)},
  { 25, -1, sizeof(::Serialize::IncidenceList)},
  { 31, -1, sizeof(::Serialize::BusGraph)},
  { 38, -1, sizeof(::Serialize::RouteData)},
  { 46, -1, sizeof(::Serialize::RouteInternalData)},
  { 53, -1, sizeof(::Serialize::RoutesInternalData)},
  { 59, -1, sizeof(::Serialize::Router)},
  { 65, -1, sizeof(::Serialize::StopVertexIdx)},
  { 73, -1, sizeof(::Serialize::VertexInfo)},
  { 79, -1, sizeof(::Serialize::BusEdgeInfo)},
  { 88, -1, sizeof(::Serialize::WaitEdgeInfo)},
  { 93, -1, sizeof(::Serialize::EdgeInfo)},
  { 101, -1, sizeof(::Serialize::RoutingSettings)},
  { 108, -1, sizeof(::Serialize::TransportRouter)},
  { 119, -1, sizeof(::Serialize::TransportCatalog)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Serialize::_StopRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Serialize::_BusRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Serialize::_Edge_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Serialize::_IncidenceList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Serialize::_BusGraph_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Serialize::_RouteData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Serialize::_RouteInternalData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Serialize::_RoutesInternalData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Serialize::_Router_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Serialize::_StopVertexIdx_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Serialize::_VertexInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Serialize::_BusEdgeInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Serialize::_WaitEdgeInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Serialize::_EdgeInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Serialize::_RoutingSettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Serialize::_TransportRouter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Serialize::_TransportCatalog_default_instance_),
};

const char descriptor_table_protodef_transport_5fcatalog_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027transport_catalog.proto\022\tSerialize\"*\n\013"
  "StopRequest\022\014\n\004stop\030\001 \001(\t\022\r\n\005buses\030\002 \003(\t"
  "\"v\n\nBusRequest\022\013\n\003bus\030\001 \001(\t\022\022\n\nstop_coun"
  "t\030\002 \001(\r\022\031\n\021unique_stop_count\030\003 \001(\r\022\023\n\013ro"
  "ad_length\030\004 \001(\r\022\027\n\017geo_road_length\030\005 \001(\002"
  "\"0\n\004Edge\022\014\n\004from\030\001 \001(\r\022\n\n\002to\030\002 \001(\r\022\016\n\006we"
  "ight\030\003 \001(\001\"!\n\rIncidenceList\022\020\n\010edge_ids\030"
  "\001 \003(\r\"_\n\010BusGraph\022\037\n\006edges_\030\001 \003(\0132\017.Seri"
  "alize.Edge\0222\n\020incidence_lists_\030\002 \003(\0132\030.S"
  "erialize.IncidenceList\";\n\tRouteData\022\016\n\006w"
  "eight\030\001 \001(\001\022\013\n\003has\030\002 \001(\010\022\021\n\tprev_edge\030\003 "
  "\001(\r\"D\n\021RouteInternalData\022\013\n\003has\030\001 \001(\010\022\"\n"
  "\004data\030\002 \001(\0132\024.Serialize.RouteData\"@\n\022Rou"
  "tesInternalData\022*\n\004data\030\001 \003(\0132\034.Serializ"
  "e.RouteInternalData\"F\n\006Router\022<\n\025routes_"
  "internal_data_\030\001 \003(\0132\035.Serialize.RoutesI"
  "nternalData\"6\n\rStopVertexIdx\022\014\n\004name\030\001 \001"
  "(\t\022\n\n\002in\030\002 \001(\r\022\013\n\003out\030\003 \001(\r\"\037\n\nVertexInf"
  "o\022\021\n\tstop_name\030\001 \001(\t\"d\n\013BusEdgeInfo\022\020\n\010b"
  "us_name\030\001 \001(\t\022\026\n\016start_stop_idx\030\002 \001(\r\022\027\n"
  "\017finish_stop_idx\030\003 \001(\r\022\022\n\nspan_count\030\004 \001"
  "(\r\"\016\n\014WaitEdgeInfo\"e\n\010EdgeInfo\022%\n\003bus\030\001 "
  "\001(\0132\026.Serialize.BusEdgeInfoH\000\022\'\n\004wait\030\002 "
  "\001(\0132\027.Serialize.WaitEdgeInfoH\000B\t\n\007varian"
  "t\">\n\017RoutingSettings\022\025\n\rbus_wait_time\030\001 "
  "\001(\005\022\024\n\014bus_velocity\030\002 \001(\002\"\227\002\n\017TransportR"
  "outer\022-\n\tsettings_\030\001 \001(\0132\032.Serialize.Rou"
  "tingSettings\022#\n\006graph_\030\002 \001(\0132\023.Serialize"
  ".BusGraph\022\"\n\007router_\030\003 \001(\0132\021.Serialize.R"
  "outer\0223\n\021stops_vertex_ids_\030\004 \003(\0132\030.Seria"
  "lize.StopVertexIdx\022-\n\016vertices_info_\030\005 \003"
  "(\0132\025.Serialize.VertexInfo\022(\n\013edges_info_"
  "\030\006 \003(\0132\023.Serialize.EdgeInfo\"\216\001\n\020Transpor"
  "tCatalog\022&\n\006stops_\030\001 \003(\0132\026.Serialize.Sto"
  "pRequest\022%\n\006buses_\030\002 \003(\0132\025.Serialize.Bus"
  "Request\022+\n\007router_\030\003 \001(\0132\032.Serialize.Tra"
  "nsportRouterb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_transport_5fcatalog_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_transport_5fcatalog_2eproto_sccs[17] = {
  &scc_info_BusEdgeInfo_transport_5fcatalog_2eproto.base,
  &scc_info_BusGraph_transport_5fcatalog_2eproto.base,
  &scc_info_BusRequest_transport_5fcatalog_2eproto.base,
  &scc_info_Edge_transport_5fcatalog_2eproto.base,
  &scc_info_EdgeInfo_transport_5fcatalog_2eproto.base,
  &scc_info_IncidenceList_transport_5fcatalog_2eproto.base,
  &scc_info_RouteData_transport_5fcatalog_2eproto.base,
  &scc_info_RouteInternalData_transport_5fcatalog_2eproto.base,
  &scc_info_Router_transport_5fcatalog_2eproto.base,
  &scc_info_RoutesInternalData_transport_5fcatalog_2eproto.base,
  &scc_info_RoutingSettings_transport_5fcatalog_2eproto.base,
  &scc_info_StopRequest_transport_5fcatalog_2eproto.base,
  &scc_info_StopVertexIdx_transport_5fcatalog_2eproto.base,
  &scc_info_TransportCatalog_transport_5fcatalog_2eproto.base,
  &scc_info_TransportRouter_transport_5fcatalog_2eproto.base,
  &scc_info_VertexInfo_transport_5fcatalog_2eproto.base,
  &scc_info_WaitEdgeInfo_transport_5fcatalog_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_transport_5fcatalog_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transport_5fcatalog_2eproto = {
  false, false, descriptor_table_protodef_transport_5fcatalog_2eproto, "transport_catalog.proto", 1460,
  &descriptor_table_transport_5fcatalog_2eproto_once, descriptor_table_transport_5fcatalog_2eproto_sccs, descriptor_table_transport_5fcatalog_2eproto_deps, 17, 0,
  schemas, file_default_instances, TableStruct_transport_5fcatalog_2eproto::offsets,
  file_level_metadata_transport_5fcatalog_2eproto, 17, file_level_enum_descriptors_transport_5fcatalog_2eproto, file_level_service_descriptors_transport_5fcatalog_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_transport_5fcatalog_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_transport_5fcatalog_2eproto)), true);
namespace Serialize {

// ===================================================================

class StopRequest::_Internal {
 public:
};

StopRequest::StopRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  buses_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Serialize.StopRequest)
}
StopRequest::StopRequest(const StopRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      buses_(from.buses_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  stop_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_stop().empty()) {
    stop_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stop(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:Serialize.StopRequest)
}

void StopRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StopRequest_transport_5fcatalog_2eproto.base);
  stop_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

StopRequest::~StopRequest() {
  // @@protoc_insertion_point(destructor:Serialize.StopRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StopRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  stop_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StopRequest::ArenaDtor(void* object) {
  StopRequest* _this = reinterpret_cast< StopRequest* >(object);
  (void)_this;
}
void StopRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StopRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StopRequest& StopRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StopRequest_transport_5fcatalog_2eproto.base);
  return *internal_default_instance();
}


void StopRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Serialize.StopRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buses_.Clear();
  stop_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StopRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string stop = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_stop();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Serialize.StopRequest.stop"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string buses = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_buses();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Serialize.StopRequest.buses"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StopRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Serialize.StopRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string stop = 1;
  if (this->stop().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stop().data(), static_cast<int>(this->_internal_stop().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Serialize.StopRequest.stop");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_stop(), target);
  }

  // repeated string buses = 2;
  for (int i = 0, n = this->_internal_buses_size(); i < n; i++) {
    const auto& s = this->_internal_buses(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Serialize.StopRequest.buses");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Serialize.StopRequest)
  return target;
}

size_t StopRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Serialize.StopRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string buses = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(buses_.size());
  for (int i = 0, n = buses_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      buses_.Get(i));
  }

  // string stop = 1;
  if (this->stop().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stop());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Serialize.StopRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StopRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StopRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Serialize.StopRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Serialize.StopRequest)
    MergeFrom(*source);
  }
}

void StopRequest::MergeFrom(const StopRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Serialize.StopRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  buses_.MergeFrom(from.buses_);
  if (from.stop().size() > 0) {
    _internal_set_stop(from._internal_stop());
  }
}

void StopRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Serialize.StopRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopRequest::CopyFrom(const StopRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Serialize.StopRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopRequest::IsInitialized() const {
  return true;
}

void StopRequest::InternalSwap(StopRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  buses_.InternalSwap(&other->buses_);
  stop_.Swap(&other->stop_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata StopRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BusRequest::_Internal {
 public:
};

BusRequest::BusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Serialize.BusRequest)
}
BusRequest::BusRequest(const BusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bus_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bus().empty()) {
    bus_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bus(), 
      GetArena());
  }
  ::memcpy(&stop_count_, &from.stop_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&geo_road_length_) -
    reinterpret_cast<char*>(&stop_count_)) + sizeof(geo_road_length_));
  // @@protoc_insertion_point(copy_constructor:Serialize.BusRequest)
}

void BusRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BusRequest_transport_5fcatalog_2eproto.base);
  bus_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&stop_count_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&geo_road_length_) -
      reinterpret_cast<char*>(&stop_count_)) + sizeof(geo_road_length_));
}

BusRequest::~BusRequest() {
  // @@protoc_insertion_point(destructor:Serialize.BusRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BusRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  bus_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BusRequest::ArenaDtor(void* object) {
  BusRequest* _this = reinterpret_cast< BusRequest* >(object);
  (void)_this;
}
void BusRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BusRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BusRequest& BusRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BusRequest_transport_5fcatalog_2eproto.base);
  return *internal_default_instance();
}


void BusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Serialize.BusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bus_.ClearToEmpty();
  ::memset(&stop_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&geo_road_length_) -
      reinterpret_cast<char*>(&stop_count_)) + sizeof(geo_road_length_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BusRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string bus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_bus();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Serialize.BusRequest.bus"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 stop_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          stop_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 unique_stop_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          unique_stop_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 road_length = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          road_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float geo_road_length = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          geo_road_length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BusRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Serialize.BusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string bus = 1;
  if (this->bus().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bus().data(), static_cast<int>(this->_internal_bus().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Serialize.BusRequest.bus");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_bus(), target);
  }

  // uint32 stop_count = 2;
  if (this->stop_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_stop_count(), target);
  }

  // uint32 unique_stop_count = 3;
  if (this->unique_stop_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_unique_stop_count(), target);
  }

  // uint32 road_length = 4;
  if (this->road_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_road_length(), target);
  }

  // float geo_road_length = 5;
  if (!(this->geo_road_length() <= 0 && this->geo_road_length() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_geo_road_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Serialize.BusRequest)
  return target;
}

size_t BusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Serialize.BusRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string bus = 1;
  if (this->bus().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bus());
  }

  // uint32 stop_count = 2;
  if (this->stop_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_stop_count());
  }

  // uint32 unique_stop_count = 3;
  if (this->unique_stop_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_unique_stop_count());
  }

  // uint32 road_length = 4;
  if (this->road_length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_road_length());
  }

  // float geo_road_length = 5;
  if (!(this->geo_road_length() <= 0 && this->geo_road_length() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BusRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Serialize.BusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BusRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BusRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Serialize.BusRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Serialize.BusRequest)
    MergeFrom(*source);
  }
}

void BusRequest::MergeFrom(const BusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Serialize.BusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bus().size() > 0) {
    _internal_set_bus(from._internal_bus());
  }
  if (from.stop_count() != 0) {
    _internal_set_stop_count(from._internal_stop_count());
  }
  if (from.unique_stop_count() != 0) {
    _internal_set_unique_stop_count(from._internal_unique_stop_count());
  }
  if (from.road_length() != 0) {
    _internal_set_road_length(from._internal_road_length());
  }
  if (!(from.geo_road_length() <= 0 && from.geo_road_length() >= 0)) {
    _internal_set_geo_road_length(from._internal_geo_road_length());
  }
}

void BusRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Serialize.BusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BusRequest::CopyFrom(const BusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Serialize.BusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BusRequest::IsInitialized() const {
  return true;
}

void BusRequest::InternalSwap(BusRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  bus_.Swap(&other->bus_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BusRequest, geo_road_length_)
      + sizeof(BusRequest::geo_road_length_)
      - PROTOBUF_FIELD_OFFSET(BusRequest, stop_count_)>(
          reinterpret_cast<char*>(&stop_count_),
          reinterpret_cast<char*>(&other->stop_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BusRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Edge::_Internal {
 public:
};

Edge::Edge(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Serialize.Edge)
}
Edge::Edge(const Edge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&from_, &from.from_,
    static_cast<size_t>(reinterpret_cast<char*>(&weight_) -
    reinterpret_cast<char*>(&from_)) + sizeof(weight_));
  // @@protoc_insertion_point(copy_constructor:Serialize.Edge)
}

void Edge::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&from_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&weight_) -
      reinterpret_cast<char*>(&from_)) + sizeof(weight_));
}

Edge::~Edge() {
  // @@protoc_insertion_point(destructor:Serialize.Edge)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Edge::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Edge::ArenaDtor(void* object) {
  Edge* _this = reinterpret_cast< Edge* >(object);
  (void)_this;
}
void Edge::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Edge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Edge& Edge::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Edge_transport_5fcatalog_2eproto.base);
  return *internal_default_instance();
}


void Edge::Clear() {
// @@protoc_insertion_point(message_clear_start:Serialize.Edge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&weight_) -
      reinterpret_cast<char*>(&from_)) + sizeof(weight_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Edge::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          to_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double weight = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Edge::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Serialize.Edge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 from = 1;
  if (this->from() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_from(), target);
  }

  // uint32 to = 2;
  if (this->to() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_to(), target);
  }

  // double weight = 3;
  if (!(this->weight() <= 0 && this->weight() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_weight(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Serialize.Edge)
  return target;
}

size_t Edge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Serialize.Edge)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 from = 1;
  if (this->from() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_from());
  }

  // uint32 to = 2;
  if (this->to() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_to());
  }

  // double weight = 3;
  if (!(this->weight() <= 0 && this->weight() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Edge::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Serialize.Edge)
  GOOGLE_DCHECK_NE(&from, this);
  const Edge* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Edge>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Serialize.Edge)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Serialize.Edge)
    MergeFrom(*source);
  }
}

void Edge::MergeFrom(const Edge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Serialize.Edge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.from() != 0) {
    _internal_set_from(from._internal_from());
  }
  if (from.to() != 0) {
    _internal_set_to(from._internal_to());
  }
  if (!(from.weight() <= 0 && from.weight() >= 0)) {
    _internal_set_weight(from._internal_weight());
  }
}

void Edge::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Serialize.Edge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Edge::CopyFrom(const Edge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Serialize.Edge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Edge::IsInitialized() const {
  return true;
}

void Edge::InternalSwap(Edge* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Edge, weight_)
      + sizeof(Edge::weight_)
      - PROTOBUF_FIELD_OFFSET(Edge, from_)>(
          reinterpret_cast<char*>(&from_),
          reinterpret_cast<char*>(&other->from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Edge::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class IncidenceList::_Internal {
 public:
};

IncidenceList::IncidenceList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  edge_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Serialize.IncidenceList)
}
IncidenceList::IncidenceList(const IncidenceList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      edge_ids_(from.edge_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Serialize.IncidenceList)
}

void IncidenceList::SharedCtor() {
}

IncidenceList::~IncidenceList() {
  // @@protoc_insertion_point(destructor:Serialize.IncidenceList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IncidenceList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IncidenceList::ArenaDtor(void* object) {
  IncidenceList* _this = reinterpret_cast< IncidenceList* >(object);
  (void)_this;
}
void IncidenceList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IncidenceList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IncidenceList& IncidenceList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IncidenceList_transport_5fcatalog_2eproto.base);
  return *internal_default_instance();
}


void IncidenceList::Clear() {
// @@protoc_insertion_point(message_clear_start:Serialize.IncidenceList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  edge_ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IncidenceList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 edge_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_edge_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_edge_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IncidenceList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Serialize.IncidenceList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 edge_ids = 1;
  {
    int byte_size = _edge_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_edge_ids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Serialize.IncidenceList)
  return target;
}

size_t IncidenceList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Serialize.IncidenceList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 edge_ids = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->edge_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _edge_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IncidenceList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Serialize.IncidenceList)
  GOOGLE_DCHECK_NE(&from, this);
  const IncidenceList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IncidenceList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Serialize.IncidenceList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Serialize.IncidenceList)
    MergeFrom(*source);
  }
}

void IncidenceList::MergeFrom(const IncidenceList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Serialize.IncidenceList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  edge_ids_.MergeFrom(from.edge_ids_);
}

void IncidenceList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Serialize.IncidenceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IncidenceList::CopyFrom(const IncidenceList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Serialize.IncidenceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IncidenceList::IsInitialized() const {
  return true;
}

void IncidenceList::InternalSwap(IncidenceList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  edge_ids_.InternalSwap(&other->edge_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IncidenceList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BusGraph::_Internal {
 public:
};

BusGraph::BusGraph(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  edges__(arena),
  incidence_lists__(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Serialize.BusGraph)
}
BusGraph::BusGraph(const BusGraph& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      edges__(from.edges__),
      incidence_lists__(from.incidence_lists__) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Serialize.BusGraph)
}

void BusGraph::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BusGraph_transport_5fcatalog_2eproto.base);
}

BusGraph::~BusGraph() {
  // @@protoc_insertion_point(destructor:Serialize.BusGraph)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BusGraph::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BusGraph::ArenaDtor(void* object) {
  BusGraph* _this = reinterpret_cast< BusGraph* >(object);
  (void)_this;
}
void BusGraph::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BusGraph::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BusGraph& BusGraph::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BusGraph_transport_5fcatalog_2eproto.base);
  return *internal_default_instance();
}


void BusGraph::Clear() {
// @@protoc_insertion_point(message_clear_start:Serialize.BusGraph)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  edges__.Clear();
  incidence_lists__.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BusGraph::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Serialize.Edge edges_ = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_edges_(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .Serialize.IncidenceList incidence_lists_ = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_incidence_lists_(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BusGraph::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Serialize.BusGraph)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Serialize.Edge edges_ = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_edges__size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_edges_(i), target, stream);
  }

  // repeated .Serialize.IncidenceList incidence_lists_ = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_incidence_lists__size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_incidence_lists_(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Serialize.BusGraph)
  return target;
}

size_t BusGraph::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Serialize.BusGraph)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Serialize.Edge edges_ = 1;
  total_size += 1UL * this->_internal_edges__size();
  for (const auto& msg : this->edges__) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Serialize.IncidenceList incidence_lists_ = 2;
  total_size += 1UL * this->_internal_incidence_lists__size();
  for (const auto& msg : this->incidence_lists__) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BusGraph::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Serialize.BusGraph)
  GOOGLE_DCHECK_NE(&from, this);
  const BusGraph* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BusGraph>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Serialize.BusGraph)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Serialize.BusGraph)
    MergeFrom(*source);
  }
}

void BusGraph::MergeFrom(const BusGraph& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Serialize.BusGraph)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  edges__.MergeFrom(from.edges__);
  incidence_lists__.MergeFrom(from.incidence_lists__);
}

void BusGraph::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Serialize.BusGraph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BusGraph::CopyFrom(const BusGraph& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Serialize.BusGraph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BusGraph::IsInitialized() const {
  return true;
}

void BusGraph::InternalSwap(BusGraph* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  edges__.InternalSwap(&other->edges__);
  incidence_lists__.InternalSwap(&other->incidence_lists__);
}

::PROTOBUF_NAMESPACE_ID::Metadata BusGraph::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RouteData::_Internal {
 public:
};

RouteData::RouteData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Serialize.RouteData)
}
RouteData::RouteData(const RouteData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&weight_, &from.weight_,
    static_cast<size_t>(reinterpret_cast<char*>(&prev_edge_) -
    reinterpret_cast<char*>(&weight_)) + sizeof(prev_edge_));
  // @@protoc_insertion_point(copy_constructor:Serialize.RouteData)
}

void RouteData::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&weight_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&prev_edge_) -
      reinterpret_cast<char*>(&weight_)) + sizeof(prev_edge_));
}

RouteData::~RouteData() {
  // @@protoc_insertion_point(destructor:Serialize.RouteData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RouteData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RouteData::ArenaDtor(void* object) {
  RouteData* _this = reinterpret_cast< RouteData* >(object);
  (void)_this;
}
void RouteData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RouteData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RouteData& RouteData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RouteData_transport_5fcatalog_2eproto.base);
  return *internal_default_instance();
}


void RouteData::Clear() {
// @@protoc_insertion_point(message_clear_start:Serialize.RouteData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&weight_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prev_edge_) -
      reinterpret_cast<char*>(&weight_)) + sizeof(prev_edge_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RouteData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double weight = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool has = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          has_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 prev_edge = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          prev_edge_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RouteData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Serialize.RouteData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double weight = 1;
  if (!(this->weight() <= 0 && this->weight() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_weight(), target);
  }

  // bool has = 2;
  if (this->has() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_has(), target);
  }

  // uint32 prev_edge = 3;
  if (this->prev_edge() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_prev_edge(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Serialize.RouteData)
  return target;
}

size_t RouteData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Serialize.RouteData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double weight = 1;
  if (!(this->weight() <= 0 && this->weight() >= 0)) {
    total_size += 1 + 8;
  }

  // bool has = 2;
  if (this->has() != 0) {
    total_size += 1 + 1;
  }

  // uint32 prev_edge = 3;
  if (this->prev_edge() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_prev_edge());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RouteData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Serialize.RouteData)
  GOOGLE_DCHECK_NE(&from, this);
  const RouteData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RouteData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Serialize.RouteData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Serialize.RouteData)
    MergeFrom(*source);
  }
}

void RouteData::MergeFrom(const RouteData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Serialize.RouteData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.weight() <= 0 && from.weight() >= 0)) {
    _internal_set_weight(from._internal_weight());
  }
  if (from.has() != 0) {
    _internal_set_has(from._internal_has());
  }
  if (from.prev_edge() != 0) {
    _internal_set_prev_edge(from._internal_prev_edge());
  }
}

void RouteData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Serialize.RouteData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteData::CopyFrom(const RouteData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Serialize.RouteData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteData::IsInitialized() const {
  return true;
}

void RouteData::InternalSwap(RouteData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RouteData, prev_edge_)
      + sizeof(RouteData::prev_edge_)
      - PROTOBUF_FIELD_OFFSET(RouteData, weight_)>(
          reinterpret_cast<char*>(&weight_),
          reinterpret_cast<char*>(&other->weight_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RouteData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RouteInternalData::_Internal {
 public:
  static const ::Serialize::RouteData& data(const RouteInternalData* msg);
};

const ::Serialize::RouteData&
RouteInternalData::_Internal::data(const RouteInternalData* msg) {
  return *msg->data_;
}
RouteInternalData::RouteInternalData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Serialize.RouteInternalData)
}
RouteInternalData::RouteInternalData(const RouteInternalData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    data_ = new ::Serialize::RouteData(*from.data_);
  } else {
    data_ = nullptr;
  }
  has_ = from.has_;
  // @@protoc_insertion_point(copy_constructor:Serialize.RouteInternalData)
}

void RouteInternalData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RouteInternalData_transport_5fcatalog_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&data_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&has_) -
      reinterpret_cast<char*>(&data_)) + sizeof(has_));
}

RouteInternalData::~RouteInternalData() {
  // @@protoc_insertion_point(destructor:Serialize.RouteInternalData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RouteInternalData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete data_;
}

void RouteInternalData::ArenaDtor(void* object) {
  RouteInternalData* _this = reinterpret_cast< RouteInternalData* >(object);
  (void)_this;
}
void RouteInternalData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RouteInternalData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RouteInternalData& RouteInternalData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RouteInternalData_transport_5fcatalog_2eproto.base);
  return *internal_default_instance();
}


void RouteInternalData::Clear() {
// @@protoc_insertion_point(message_clear_start:Serialize.RouteInternalData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  has_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RouteInternalData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool has = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          has_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Serialize.RouteData data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RouteInternalData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Serialize.RouteInternalData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool has = 1;
  if (this->has() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_has(), target);
  }

  // .Serialize.RouteData data = 2;
  if (this->has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Serialize.RouteInternalData)
  return target;
}

size_t RouteInternalData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Serialize.RouteInternalData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Serialize.RouteData data = 2;
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // bool has = 1;
  if (this->has() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RouteInternalData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Serialize.RouteInternalData)
  GOOGLE_DCHECK_NE(&from, this);
  const RouteInternalData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RouteInternalData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Serialize.RouteInternalData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Serialize.RouteInternalData)
    MergeFrom(*source);
  }
}

void RouteInternalData::MergeFrom(const RouteInternalData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Serialize.RouteInternalData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_data()) {
    _internal_mutable_data()->::Serialize::RouteData::MergeFrom(from._internal_data());
  }
  if (from.has() != 0) {
    _internal_set_has(from._internal_has());
  }
}

void RouteInternalData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Serialize.RouteInternalData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteInternalData::CopyFrom(const RouteInternalData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Serialize.RouteInternalData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteInternalData::IsInitialized() const {
  return true;
}

void RouteInternalData::InternalSwap(RouteInternalData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RouteInternalData, has_)
      + sizeof(RouteInternalData::has_)
      - PROTOBUF_FIELD_OFFSET(RouteInternalData, data_)>(
          reinterpret_cast<char*>(&data_),
          reinterpret_cast<char*>(&other->data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RouteInternalData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RoutesInternalData::_Internal {
 public:
};

RoutesInternalData::RoutesInternalData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Serialize.RoutesInternalData)
}
RoutesInternalData::RoutesInternalData(const RoutesInternalData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Serialize.RoutesInternalData)
}

void RoutesInternalData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoutesInternalData_transport_5fcatalog_2eproto.base);
}

RoutesInternalData::~RoutesInternalData() {
  // @@protoc_insertion_point(destructor:Serialize.RoutesInternalData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RoutesInternalData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RoutesInternalData::ArenaDtor(void* object) {
  RoutesInternalData* _this = reinterpret_cast< RoutesInternalData* >(object);
  (void)_this;
}
void RoutesInternalData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoutesInternalData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoutesInternalData& RoutesInternalData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoutesInternalData_transport_5fcatalog_2eproto.base);
  return *internal_default_instance();
}


void RoutesInternalData::Clear() {
// @@protoc_insertion_point(message_clear_start:Serialize.RoutesInternalData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoutesInternalData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Serialize.RouteInternalData data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoutesInternalData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Serialize.RoutesInternalData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Serialize.RouteInternalData data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Serialize.RoutesInternalData)
  return target;
}

size_t RoutesInternalData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Serialize.RoutesInternalData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Serialize.RouteInternalData data = 1;
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoutesInternalData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Serialize.RoutesInternalData)
  GOOGLE_DCHECK_NE(&from, this);
  const RoutesInternalData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoutesInternalData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Serialize.RoutesInternalData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Serialize.RoutesInternalData)
    MergeFrom(*source);
  }
}

void RoutesInternalData::MergeFrom(const RoutesInternalData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Serialize.RoutesInternalData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void RoutesInternalData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Serialize.RoutesInternalData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoutesInternalData::CopyFrom(const RoutesInternalData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Serialize.RoutesInternalData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutesInternalData::IsInitialized() const {
  return true;
}

void RoutesInternalData::InternalSwap(RoutesInternalData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoutesInternalData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Router::_Internal {
 public:
};

Router::Router(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  routes_internal_data__(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Serialize.Router)
}
Router::Router(const Router& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      routes_internal_data__(from.routes_internal_data__) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Serialize.Router)
}

void Router::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Router_transport_5fcatalog_2eproto.base);
}

Router::~Router() {
  // @@protoc_insertion_point(destructor:Serialize.Router)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Router::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Router::ArenaDtor(void* object) {
  Router* _this = reinterpret_cast< Router* >(object);
  (void)_this;
}
void Router::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Router::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Router& Router::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Router_transport_5fcatalog_2eproto.base);
  return *internal_default_instance();
}


void Router::Clear() {
// @@protoc_insertion_point(message_clear_start:Serialize.Router)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  routes_internal_data__.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Router::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Serialize.RoutesInternalData routes_internal_data_ = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_routes_internal_data_(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Router::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Serialize.Router)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Serialize.RoutesInternalData routes_internal_data_ = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_routes_internal_data__size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_routes_internal_data_(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Serialize.Router)
  return target;
}

size_t Router::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Serialize.Router)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Serialize.RoutesInternalData routes_internal_data_ = 1;
  total_size += 1UL * this->_internal_routes_internal_data__size();
  for (const auto& msg : this->routes_internal_data__) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Router::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Serialize.Router)
  GOOGLE_DCHECK_NE(&from, this);
  const Router* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Router>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Serialize.Router)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Serialize.Router)
    MergeFrom(*source);
  }
}

void Router::MergeFrom(const Router& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Serialize.Router)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  routes_internal_data__.MergeFrom(from.routes_internal_data__);
}

void Router::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Serialize.Router)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Router::CopyFrom(const Router& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Serialize.Router)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Router::IsInitialized() const {
  return true;
}

void Router::InternalSwap(Router* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  routes_internal_data__.InternalSwap(&other->routes_internal_data__);
}

::PROTOBUF_NAMESPACE_ID::Metadata Router::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StopVertexIdx::_Internal {
 public:
};

StopVertexIdx::StopVertexIdx(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Serialize.StopVertexIdx)
}
StopVertexIdx::StopVertexIdx(const StopVertexIdx& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ::memcpy(&in_, &from.in_,
    static_cast<size_t>(reinterpret_cast<char*>(&out_) -
    reinterpret_cast<char*>(&in_)) + sizeof(out_));
  // @@protoc_insertion_point(copy_constructor:Serialize.StopVertexIdx)
}

void StopVertexIdx::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StopVertexIdx_transport_5fcatalog_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&in_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&out_) -
      reinterpret_cast<char*>(&in_)) + sizeof(out_));
}

StopVertexIdx::~StopVertexIdx() {
  // @@protoc_insertion_point(destructor:Serialize.StopVertexIdx)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StopVertexIdx::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StopVertexIdx::ArenaDtor(void* object) {
  StopVertexIdx* _this = reinterpret_cast< StopVertexIdx* >(object);
  (void)_this;
}
void StopVertexIdx::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StopVertexIdx::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StopVertexIdx& StopVertexIdx::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StopVertexIdx_transport_5fcatalog_2eproto.base);
  return *internal_default_instance();
}


void StopVertexIdx::Clear() {
// @@protoc_insertion_point(message_clear_start:Serialize.StopVertexIdx)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  ::memset(&in_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&out_) -
      reinterpret_cast<char*>(&in_)) + sizeof(out_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StopVertexIdx::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Serialize.StopVertexIdx.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 in = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          in_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 out = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          out_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StopVertexIdx::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Serialize.StopVertexIdx)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Serialize.StopVertexIdx.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // uint32 in = 2;
  if (this->in() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_in(), target);
  }

  // uint32 out = 3;
  if (this->out() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_out(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Serialize.StopVertexIdx)
  return target;
}

size_t StopVertexIdx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Serialize.StopVertexIdx)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint32 in = 2;
  if (this->in() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_in());
  }

  // uint32 out = 3;
  if (this->out() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_out());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopVertexIdx::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Serialize.StopVertexIdx)
  GOOGLE_DCHECK_NE(&from, this);
  const StopVertexIdx* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StopVertexIdx>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Serialize.StopVertexIdx)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Serialize.StopVertexIdx)
    MergeFrom(*source);
  }
}

void StopVertexIdx::MergeFrom(const StopVertexIdx& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Serialize.StopVertexIdx)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.in() != 0) {
    _internal_set_in(from._internal_in());
  }
  if (from.out() != 0) {
    _internal_set_out(from._internal_out());
  }
}

void StopVertexIdx::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Serialize.StopVertexIdx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopVertexIdx::CopyFrom(const StopVertexIdx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Serialize.StopVertexIdx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopVertexIdx::IsInitialized() const {
  return true;
}

void StopVertexIdx::InternalSwap(StopVertexIdx* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StopVertexIdx, out_)
      + sizeof(StopVertexIdx::out_)
      - PROTOBUF_FIELD_OFFSET(StopVertexIdx, in_)>(
          reinterpret_cast<char*>(&in_),
          reinterpret_cast<char*>(&other->in_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StopVertexIdx::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VertexInfo::_Internal {
 public:
};

VertexInfo::VertexInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Serialize.VertexInfo)
}
VertexInfo::VertexInfo(const VertexInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  stop_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_stop_name().empty()) {
    stop_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stop_name(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:Serialize.VertexInfo)
}

void VertexInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VertexInfo_transport_5fcatalog_2eproto.base);
  stop_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

VertexInfo::~VertexInfo() {
  // @@protoc_insertion_point(destructor:Serialize.VertexInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VertexInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  stop_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VertexInfo::ArenaDtor(void* object) {
  VertexInfo* _this = reinterpret_cast< VertexInfo* >(object);
  (void)_this;
}
void VertexInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VertexInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VertexInfo& VertexInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VertexInfo_transport_5fcatalog_2eproto.base);
  return *internal_default_instance();
}


void VertexInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Serialize.VertexInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stop_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VertexInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string stop_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_stop_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Serialize.VertexInfo.stop_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VertexInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Serialize.VertexInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string stop_name = 1;
  if (this->stop_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stop_name().data(), static_cast<int>(this->_internal_stop_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Serialize.VertexInfo.stop_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_stop_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Serialize.VertexInfo)
  return target;
}

size_t VertexInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Serialize.VertexInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string stop_name = 1;
  if (this->stop_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stop_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VertexInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Serialize.VertexInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const VertexInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VertexInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Serialize.VertexInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Serialize.VertexInfo)
    MergeFrom(*source);
  }
}

void VertexInfo::MergeFrom(const VertexInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Serialize.VertexInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.stop_name().size() > 0) {
    _internal_set_stop_name(from._internal_stop_name());
  }
}

void VertexInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Serialize.VertexInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VertexInfo::CopyFrom(const VertexInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Serialize.VertexInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VertexInfo::IsInitialized() const {
  return true;
}

void VertexInfo::InternalSwap(VertexInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  stop_name_.Swap(&other->stop_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata VertexInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BusEdgeInfo::_Internal {
 public:
};

BusEdgeInfo::BusEdgeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Serialize.BusEdgeInfo)
}
BusEdgeInfo::BusEdgeInfo(const BusEdgeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bus_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bus_name().empty()) {
    bus_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bus_name(), 
      GetArena());
  }
  ::memcpy(&start_stop_idx_, &from.start_stop_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&span_count_) -
    reinterpret_cast<char*>(&start_stop_idx_)) + sizeof(span_count_));
  // @@protoc_insertion_point(copy_constructor:Serialize.BusEdgeInfo)
}

void BusEdgeInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BusEdgeInfo_transport_5fcatalog_2eproto.base);
  bus_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&start_stop_idx_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&span_count_) -
      reinterpret_cast<char*>(&start_stop_idx_)) + sizeof(span_count_));
}

BusEdgeInfo::~BusEdgeInfo() {
  // @@protoc_insertion_point(destructor:Serialize.BusEdgeInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BusEdgeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  bus_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BusEdgeInfo::ArenaDtor(void* object) {
  BusEdgeInfo* _this = reinterpret_cast< BusEdgeInfo* >(object);
  (void)_this;
}
void BusEdgeInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BusEdgeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BusEdgeInfo& BusEdgeInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BusEdgeInfo_transport_5fcatalog_2eproto.base);
  return *internal_default_instance();
}


void BusEdgeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Serialize.BusEdgeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bus_name_.ClearToEmpty();
  ::memset(&start_stop_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&span_count_) -
      reinterpret_cast<char*>(&start_stop_idx_)) + sizeof(span_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BusEdgeInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string bus_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_bus_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Serialize.BusEdgeInfo.bus_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 start_stop_idx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          start_stop_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 finish_stop_idx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          finish_stop_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 span_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          span_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BusEdgeInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Serialize.BusEdgeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string bus_name = 1;
  if (this->bus_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bus_name().data(), static_cast<int>(this->_internal_bus_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Serialize.BusEdgeInfo.bus_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_bus_name(), target);
  }

  // uint32 start_stop_idx = 2;
  if (this->start_stop_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_start_stop_idx(), target);
  }

  // uint32 finish_stop_idx = 3;
  if (this->finish_stop_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_finish_stop_idx(), target);
  }

  // uint32 span_count = 4;
  if (this->span_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_span_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Serialize.BusEdgeInfo)
  return target;
}

size_t BusEdgeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Serialize.BusEdgeInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string bus_name = 1;
  if (this->bus_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bus_name());
  }

  // uint32 start_stop_idx = 2;
  if (this->start_stop_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_start_stop_idx());
  }

  // uint32 finish_stop_idx = 3;
  if (this->finish_stop_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_finish_stop_idx());
  }

  // uint32 span_count = 4;
  if (this->span_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_span_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BusEdgeInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Serialize.BusEdgeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BusEdgeInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BusEdgeInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Serialize.BusEdgeInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Serialize.BusEdgeInfo)
    MergeFrom(*source);
  }
}

void BusEdgeInfo::MergeFrom(const BusEdgeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Serialize.BusEdgeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bus_name().size() > 0) {
    _internal_set_bus_name(from._internal_bus_name());
  }
  if (from.start_stop_idx() != 0) {
    _internal_set_start_stop_idx(from._internal_start_stop_idx());
  }
  if (from.finish_stop_idx() != 0) {
    _internal_set_finish_stop_idx(from._internal_finish_stop_idx());
  }
  if (from.span_count() != 0) {
    _internal_set_span_count(from._internal_span_count());
  }
}

void BusEdgeInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Serialize.BusEdgeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BusEdgeInfo::CopyFrom(const BusEdgeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Serialize.BusEdgeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BusEdgeInfo::IsInitialized() const {
  return true;
}

void BusEdgeInfo::InternalSwap(BusEdgeInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  bus_name_.Swap(&other->bus_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BusEdgeInfo, span_count_)
      + sizeof(BusEdgeInfo::span_count_)
      - PROTOBUF_FIELD_OFFSET(BusEdgeInfo, start_stop_idx_)>(
          reinterpret_cast<char*>(&start_stop_idx_),
          reinterpret_cast<char*>(&other->start_stop_idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BusEdgeInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WaitEdgeInfo::_Internal {
 public:
};

WaitEdgeInfo::WaitEdgeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Serialize.WaitEdgeInfo)
}
WaitEdgeInfo::WaitEdgeInfo(const WaitEdgeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Serialize.WaitEdgeInfo)
}

void WaitEdgeInfo::SharedCtor() {
}

WaitEdgeInfo::~WaitEdgeInfo() {
  // @@protoc_insertion_point(destructor:Serialize.WaitEdgeInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WaitEdgeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void WaitEdgeInfo::ArenaDtor(void* object) {
  WaitEdgeInfo* _this = reinterpret_cast< WaitEdgeInfo* >(object);
  (void)_this;
}
void WaitEdgeInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WaitEdgeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WaitEdgeInfo& WaitEdgeInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WaitEdgeInfo_transport_5fcatalog_2eproto.base);
  return *internal_default_instance();
}


void WaitEdgeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Serialize.WaitEdgeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WaitEdgeInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WaitEdgeInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Serialize.WaitEdgeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Serialize.WaitEdgeInfo)
  return target;
}

size_t WaitEdgeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Serialize.WaitEdgeInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WaitEdgeInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Serialize.WaitEdgeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const WaitEdgeInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WaitEdgeInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Serialize.WaitEdgeInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Serialize.WaitEdgeInfo)
    MergeFrom(*source);
  }
}

void WaitEdgeInfo::MergeFrom(const WaitEdgeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Serialize.WaitEdgeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void WaitEdgeInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Serialize.WaitEdgeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WaitEdgeInfo::CopyFrom(const WaitEdgeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Serialize.WaitEdgeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WaitEdgeInfo::IsInitialized() const {
  return true;
}

void WaitEdgeInfo::InternalSwap(WaitEdgeInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WaitEdgeInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EdgeInfo::_Internal {
 public:
  static const ::Serialize::BusEdgeInfo& bus(const EdgeInfo* msg);
  static const ::Serialize::WaitEdgeInfo& wait(const EdgeInfo* msg);
};

const ::Serialize::BusEdgeInfo&
EdgeInfo::_Internal::bus(const EdgeInfo* msg) {
  return *msg->variant_.bus_;
}
const ::Serialize::WaitEdgeInfo&
EdgeInfo::_Internal::wait(const EdgeInfo* msg) {
  return *msg->variant_.wait_;
}
void EdgeInfo::set_allocated_bus(::Serialize::BusEdgeInfo* bus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_variant();
  if (bus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bus);
    if (message_arena != submessage_arena) {
      bus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bus, submessage_arena);
    }
    set_has_bus();
    variant_.bus_ = bus;
  }
  // @@protoc_insertion_point(field_set_allocated:Serialize.EdgeInfo.bus)
}
void EdgeInfo::set_allocated_wait(::Serialize::WaitEdgeInfo* wait) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_variant();
  if (wait) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(wait);
    if (message_arena != submessage_arena) {
      wait = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wait, submessage_arena);
    }
    set_has_wait();
    variant_.wait_ = wait;
  }
  // @@protoc_insertion_point(field_set_allocated:Serialize.EdgeInfo.wait)
}
EdgeInfo::EdgeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Serialize.EdgeInfo)
}
EdgeInfo::EdgeInfo(const EdgeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_variant();
  switch (from.variant_case()) {
    case kBus: {
      _internal_mutable_bus()->::Serialize::BusEdgeInfo::MergeFrom(from._internal_bus());
      break;
    }
    case kWait: {
      _internal_mutable_wait()->::Serialize::WaitEdgeInfo::MergeFrom(from._internal_wait());
      break;
    }
    case VARIANT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Serialize.EdgeInfo)
}

void EdgeInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EdgeInfo_transport_5fcatalog_2eproto.base);
  clear_has_variant();
}

EdgeInfo::~EdgeInfo() {
  // @@protoc_insertion_point(destructor:Serialize.EdgeInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EdgeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_variant()) {
    clear_variant();
  }
}

void EdgeInfo::ArenaDtor(void* object) {
  EdgeInfo* _this = reinterpret_cast< EdgeInfo* >(object);
  (void)_this;
}
void EdgeInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EdgeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EdgeInfo& EdgeInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EdgeInfo_transport_5fcatalog_2eproto.base);
  return *internal_default_instance();
}


void EdgeInfo::clear_variant() {
// @@protoc_insertion_point(one_of_clear_start:Serialize.EdgeInfo)
  switch (variant_case()) {
    case kBus: {
      if (GetArena() == nullptr) {
        delete variant_.bus_;
      }
      break;
    }
    case kWait: {
      if (GetArena() == nullptr) {
        delete variant_.wait_;
      }
      break;
    }
    case VARIANT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VARIANT_NOT_SET;
}


void EdgeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Serialize.EdgeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_variant();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EdgeInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Serialize.BusEdgeInfo bus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_bus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Serialize.WaitEdgeInfo wait = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_wait(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EdgeInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Serialize.EdgeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Serialize.BusEdgeInfo bus = 1;
  if (_internal_has_bus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::bus(this), target, stream);
  }

  // .Serialize.WaitEdgeInfo wait = 2;
  if (_internal_has_wait()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::wait(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Serialize.EdgeInfo)
  return target;
}

size_t EdgeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Serialize.EdgeInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (variant_case()) {
    // .Serialize.BusEdgeInfo bus = 1;
    case kBus: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *variant_.bus_);
      break;
    }
    // .Serialize.WaitEdgeInfo wait = 2;
    case kWait: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *variant_.wait_);
      break;
    }
    case VARIANT_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EdgeInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Serialize.EdgeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const EdgeInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EdgeInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Serialize.EdgeInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Serialize.EdgeInfo)
    MergeFrom(*source);
  }
}

void EdgeInfo::MergeFrom(const EdgeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Serialize.EdgeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.variant_case()) {
    case kBus: {
      _internal_mutable_bus()->::Serialize::BusEdgeInfo::MergeFrom(from._internal_bus());
      break;
    }
    case kWait: {
      _internal_mutable_wait()->::Serialize::WaitEdgeInfo::MergeFrom(from._internal_wait());
      break;
    }
    case VARIANT_NOT_SET: {
      break;
    }
  }
}

void EdgeInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Serialize.EdgeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EdgeInfo::CopyFrom(const EdgeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Serialize.EdgeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EdgeInfo::IsInitialized() const {
  return true;
}

void EdgeInfo::InternalSwap(EdgeInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(variant_, other->variant_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata EdgeInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RoutingSettings::_Internal {
 public:
};

RoutingSettings::RoutingSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Serialize.RoutingSettings)
}
RoutingSettings::RoutingSettings(const RoutingSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&bus_wait_time_, &from.bus_wait_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&bus_velocity_) -
    reinterpret_cast<char*>(&bus_wait_time_)) + sizeof(bus_velocity_));
  // @@protoc_insertion_point(copy_constructor:Serialize.RoutingSettings)
}

void RoutingSettings::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&bus_wait_time_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&bus_velocity_) -
      reinterpret_cast<char*>(&bus_wait_time_)) + sizeof(bus_velocity_));
}

RoutingSettings::~RoutingSettings() {
  // @@protoc_insertion_point(destructor:Serialize.RoutingSettings)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RoutingSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RoutingSettings::ArenaDtor(void* object) {
  RoutingSettings* _this = reinterpret_cast< RoutingSettings* >(object);
  (void)_this;
}
void RoutingSettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoutingSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoutingSettings& RoutingSettings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoutingSettings_transport_5fcatalog_2eproto.base);
  return *internal_default_instance();
}


void RoutingSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:Serialize.RoutingSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&bus_wait_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bus_velocity_) -
      reinterpret_cast<char*>(&bus_wait_time_)) + sizeof(bus_velocity_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoutingSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 bus_wait_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          bus_wait_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float bus_velocity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          bus_velocity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoutingSettings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Serialize.RoutingSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 bus_wait_time = 1;
  if (this->bus_wait_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_bus_wait_time(), target);
  }

  // float bus_velocity = 2;
  if (!(this->bus_velocity() <= 0 && this->bus_velocity() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_bus_velocity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Serialize.RoutingSettings)
  return target;
}

size_t RoutingSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Serialize.RoutingSettings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 bus_wait_time = 1;
  if (this->bus_wait_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bus_wait_time());
  }

  // float bus_velocity = 2;
  if (!(this->bus_velocity() <= 0 && this->bus_velocity() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoutingSettings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Serialize.RoutingSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const RoutingSettings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoutingSettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Serialize.RoutingSettings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Serialize.RoutingSettings)
    MergeFrom(*source);
  }
}

void RoutingSettings::MergeFrom(const RoutingSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Serialize.RoutingSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bus_wait_time() != 0) {
    _internal_set_bus_wait_time(from._internal_bus_wait_time());
  }
  if (!(from.bus_velocity() <= 0 && from.bus_velocity() >= 0)) {
    _internal_set_bus_velocity(from._internal_bus_velocity());
  }
}

void RoutingSettings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Serialize.RoutingSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoutingSettings::CopyFrom(const RoutingSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Serialize.RoutingSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutingSettings::IsInitialized() const {
  return true;
}

void RoutingSettings::InternalSwap(RoutingSettings* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoutingSettings, bus_velocity_)
      + sizeof(RoutingSettings::bus_velocity_)
      - PROTOBUF_FIELD_OFFSET(RoutingSettings, bus_wait_time_)>(
          reinterpret_cast<char*>(&bus_wait_time_),
          reinterpret_cast<char*>(&other->bus_wait_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoutingSettings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TransportRouter::_Internal {
 public:
  static const ::Serialize::RoutingSettings& settings_(const TransportRouter* msg);
  static const ::Serialize::BusGraph& graph_(const TransportRouter* msg);
  static const ::Serialize::Router& router_(const TransportRouter* msg);
};

const ::Serialize::RoutingSettings&
TransportRouter::_Internal::settings_(const TransportRouter* msg) {
  return *msg->settings__;
}
const ::Serialize::BusGraph&
TransportRouter::_Internal::graph_(const TransportRouter* msg) {
  return *msg->graph__;
}
const ::Serialize::Router&
TransportRouter::_Internal::router_(const TransportRouter* msg) {
  return *msg->router__;
}
TransportRouter::TransportRouter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  stops_vertex_ids__(arena),
  vertices_info__(arena),
  edges_info__(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Serialize.TransportRouter)
}
TransportRouter::TransportRouter(const TransportRouter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      stops_vertex_ids__(from.stops_vertex_ids__),
      vertices_info__(from.vertices_info__),
      edges_info__(from.edges_info__) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_settings_()) {
    settings__ = new ::Serialize::RoutingSettings(*from.settings__);
  } else {
    settings__ = nullptr;
  }
  if (from._internal_has_graph_()) {
    graph__ = new ::Serialize::BusGraph(*from.graph__);
  } else {
    graph__ = nullptr;
  }
  if (from._internal_has_router_()) {
    router__ = new ::Serialize::Router(*from.router__);
  } else {
    router__ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Serialize.TransportRouter)
}

void TransportRouter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransportRouter_transport_5fcatalog_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&settings__) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&router__) -
      reinterpret_cast<char*>(&settings__)) + sizeof(router__));
}

TransportRouter::~TransportRouter() {
  // @@protoc_insertion_point(destructor:Serialize.TransportRouter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransportRouter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete settings__;
  if (this != internal_default_instance()) delete graph__;
  if (this != internal_default_instance()) delete router__;
}

void TransportRouter::ArenaDtor(void* object) {
  TransportRouter* _this = reinterpret_cast< TransportRouter* >(object);
  (void)_this;
}
void TransportRouter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransportRouter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransportRouter& TransportRouter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransportRouter_transport_5fcatalog_2eproto.base);
  return *internal_default_instance();
}


void TransportRouter::Clear() {
// @@protoc_insertion_point(message_clear_start:Serialize.TransportRouter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stops_vertex_ids__.Clear();
  vertices_info__.Clear();
  edges_info__.Clear();
  if (GetArena() == nullptr && settings__ != nullptr) {
    delete settings__;
  }
  settings__ = nullptr;
  if (GetArena() == nullptr && graph__ != nullptr) {
    delete graph__;
  }
  graph__ = nullptr;
  if (GetArena() == nullptr && router__ != nullptr) {
    delete router__;
  }
  router__ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransportRouter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Serialize.RoutingSettings settings_ = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_settings_(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Serialize.BusGraph graph_ = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_graph_(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Serialize.Router router_ = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_router_(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Serialize.StopVertexIdx stops_vertex_ids_ = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stops_vertex_ids_(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .Serialize.VertexInfo vertices_info_ = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vertices_info_(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .Serialize.EdgeInfo edges_info_ = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_edges_info_(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransportRouter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Serialize.TransportRouter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Serialize.RoutingSettings settings_ = 1;
  if (this->has_settings_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::settings_(this), target, stream);
  }

  // .Serialize.BusGraph graph_ = 2;
  if (this->has_graph_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::graph_(this), target, stream);
  }

  // .Serialize.Router router_ = 3;
  if (this->has_router_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::router_(this), target, stream);
  }

  // repeated .Serialize.StopVertexIdx stops_vertex_ids_ = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stops_vertex_ids__size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_stops_vertex_ids_(i), target, stream);
  }

  // repeated .Serialize.VertexInfo vertices_info_ = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vertices_info__size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_vertices_info_(i), target, stream);
  }

  // repeated .Serialize.EdgeInfo edges_info_ = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_edges_info__size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_edges_info_(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Serialize.TransportRouter)
  return target;
}

size_t TransportRouter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Serialize.TransportRouter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Serialize.StopVertexIdx stops_vertex_ids_ = 4;
  total_size += 1UL * this->_internal_stops_vertex_ids__size();
  for (const auto& msg : this->stops_vertex_ids__) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Serialize.VertexInfo vertices_info_ = 5;
  total_size += 1UL * this->_internal_vertices_info__size();
  for (const auto& msg : this->vertices_info__) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Serialize.EdgeInfo edges_info_ = 6;
  total_size += 1UL * this->_internal_edges_info__size();
  for (const auto& msg : this->edges_info__) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .Serialize.RoutingSettings settings_ = 1;
  if (this->has_settings_()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *settings__);
  }

  // .Serialize.BusGraph graph_ = 2;
  if (this->has_graph_()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *graph__);
  }

  // .Serialize.Router router_ = 3;
  if (this->has_router_()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *router__);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransportRouter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Serialize.TransportRouter)
  GOOGLE_DCHECK_NE(&from, this);
  const TransportRouter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransportRouter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Serialize.TransportRouter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Serialize.TransportRouter)
    MergeFrom(*source);
  }
}

void TransportRouter::MergeFrom(const TransportRouter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Serialize.TransportRouter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stops_vertex_ids__.MergeFrom(from.stops_vertex_ids__);
  vertices_info__.MergeFrom(from.vertices_info__);
  edges_info__.MergeFrom(from.edges_info__);
  if (from.has_settings_()) {
    _internal_mutable_settings_()->::Serialize::RoutingSettings::MergeFrom(from._internal_settings_());
  }
  if (from.has_graph_()) {
    _internal_mutable_graph_()->::Serialize::BusGraph::MergeFrom(from._internal_graph_());
  }
  if (from.has_router_()) {
    _internal_mutable_router_()->::Serialize::Router::MergeFrom(from._internal_router_());
  }
}

void TransportRouter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Serialize.TransportRouter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransportRouter::CopyFrom(const TransportRouter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Serialize.TransportRouter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransportRouter::IsInitialized() const {
  return true;
}

void TransportRouter::InternalSwap(TransportRouter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  stops_vertex_ids__.InternalSwap(&other->stops_vertex_ids__);
  vertices_info__.InternalSwap(&other->vertices_info__);
  edges_info__.InternalSwap(&other->edges_info__);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransportRouter, router__)
      + sizeof(TransportRouter::router__)
      - PROTOBUF_FIELD_OFFSET(TransportRouter, settings__)>(
          reinterpret_cast<char*>(&settings__),
          reinterpret_cast<char*>(&other->settings__));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransportRouter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TransportCatalog::_Internal {
 public:
  static const ::Serialize::TransportRouter& router_(const TransportCatalog* msg);
};

const ::Serialize::TransportRouter&
TransportCatalog::_Internal::router_(const TransportCatalog* msg) {
  return *msg->router__;
}
TransportCatalog::TransportCatalog(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  stops__(arena),
  buses__(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Serialize.TransportCatalog)
}
TransportCatalog::TransportCatalog(const TransportCatalog& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      stops__(from.stops__),
      buses__(from.buses__) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_router_()) {
    router__ = new ::Serialize::TransportRouter(*from.router__);
  } else {
    router__ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Serialize.TransportCatalog)
}

void TransportCatalog::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransportCatalog_transport_5fcatalog_2eproto.base);
  router__ = nullptr;
}

TransportCatalog::~TransportCatalog() {
  // @@protoc_insertion_point(destructor:Serialize.TransportCatalog)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransportCatalog::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete router__;
}

void TransportCatalog::ArenaDtor(void* object) {
  TransportCatalog* _this = reinterpret_cast< TransportCatalog* >(object);
  (void)_this;
}
void TransportCatalog::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransportCatalog::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransportCatalog& TransportCatalog::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransportCatalog_transport_5fcatalog_2eproto.base);
  return *internal_default_instance();
}


void TransportCatalog::Clear() {
// @@protoc_insertion_point(message_clear_start:Serialize.TransportCatalog)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stops__.Clear();
  buses__.Clear();
  if (GetArena() == nullptr && router__ != nullptr) {
    delete router__;
  }
  router__ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransportCatalog::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Serialize.StopRequest stops_ = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stops_(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .Serialize.BusRequest buses_ = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buses_(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .Serialize.TransportRouter router_ = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_router_(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransportCatalog::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Serialize.TransportCatalog)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Serialize.StopRequest stops_ = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stops__size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_stops_(i), target, stream);
  }

  // repeated .Serialize.BusRequest buses_ = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_buses__size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_buses_(i), target, stream);
  }

  // .Serialize.TransportRouter router_ = 3;
  if (this->has_router_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::router_(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Serialize.TransportCatalog)
  return target;
}

size_t TransportCatalog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Serialize.TransportCatalog)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Serialize.StopRequest stops_ = 1;
  total_size += 1UL * this->_internal_stops__size();
  for (const auto& msg : this->stops__) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Serialize.BusRequest buses_ = 2;
  total_size += 1UL * this->_internal_buses__size();
  for (const auto& msg : this->buses__) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .Serialize.TransportRouter router_ = 3;
  if (this->has_router_()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *router__);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransportCatalog::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Serialize.TransportCatalog)
  GOOGLE_DCHECK_NE(&from, this);
  const TransportCatalog* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransportCatalog>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Serialize.TransportCatalog)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Serialize.TransportCatalog)
    MergeFrom(*source);
  }
}

void TransportCatalog::MergeFrom(const TransportCatalog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Serialize.TransportCatalog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stops__.MergeFrom(from.stops__);
  buses__.MergeFrom(from.buses__);
  if (from.has_router_()) {
    _internal_mutable_router_()->::Serialize::TransportRouter::MergeFrom(from._internal_router_());
  }
}

void TransportCatalog::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Serialize.TransportCatalog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransportCatalog::CopyFrom(const TransportCatalog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Serialize.TransportCatalog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransportCatalog::IsInitialized() const {
  return true;
}

void TransportCatalog::InternalSwap(TransportCatalog* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  stops__.InternalSwap(&other->stops__);
  buses__.InternalSwap(&other->buses__);
  swap(router__, other->router__);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransportCatalog::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Serialize
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Serialize::StopRequest* Arena::CreateMaybeMessage< ::Serialize::StopRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Serialize::StopRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Serialize::BusRequest* Arena::CreateMaybeMessage< ::Serialize::BusRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Serialize::BusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Serialize::Edge* Arena::CreateMaybeMessage< ::Serialize::Edge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Serialize::Edge >(arena);
}
template<> PROTOBUF_NOINLINE ::Serialize::IncidenceList* Arena::CreateMaybeMessage< ::Serialize::IncidenceList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Serialize::IncidenceList >(arena);
}
template<> PROTOBUF_NOINLINE ::Serialize::BusGraph* Arena::CreateMaybeMessage< ::Serialize::BusGraph >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Serialize::BusGraph >(arena);
}
template<> PROTOBUF_NOINLINE ::Serialize::RouteData* Arena::CreateMaybeMessage< ::Serialize::RouteData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Serialize::RouteData >(arena);
}
template<> PROTOBUF_NOINLINE ::Serialize::RouteInternalData* Arena::CreateMaybeMessage< ::Serialize::RouteInternalData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Serialize::RouteInternalData >(arena);
}
template<> PROTOBUF_NOINLINE ::Serialize::RoutesInternalData* Arena::CreateMaybeMessage< ::Serialize::RoutesInternalData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Serialize::RoutesInternalData >(arena);
}
template<> PROTOBUF_NOINLINE ::Serialize::Router* Arena::CreateMaybeMessage< ::Serialize::Router >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Serialize::Router >(arena);
}
template<> PROTOBUF_NOINLINE ::Serialize::StopVertexIdx* Arena::CreateMaybeMessage< ::Serialize::StopVertexIdx >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Serialize::StopVertexIdx >(arena);
}
template<> PROTOBUF_NOINLINE ::Serialize::VertexInfo* Arena::CreateMaybeMessage< ::Serialize::VertexInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Serialize::VertexInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Serialize::BusEdgeInfo* Arena::CreateMaybeMessage< ::Serialize::BusEdgeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Serialize::BusEdgeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Serialize::WaitEdgeInfo* Arena::CreateMaybeMessage< ::Serialize::WaitEdgeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Serialize::WaitEdgeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Serialize::EdgeInfo* Arena::CreateMaybeMessage< ::Serialize::EdgeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Serialize::EdgeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Serialize::RoutingSettings* Arena::CreateMaybeMessage< ::Serialize::RoutingSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Serialize::RoutingSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::Serialize::TransportRouter* Arena::CreateMaybeMessage< ::Serialize::TransportRouter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Serialize::TransportRouter >(arena);
}
template<> PROTOBUF_NOINLINE ::Serialize::TransportCatalog* Arena::CreateMaybeMessage< ::Serialize::TransportCatalog >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Serialize::TransportCatalog >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
