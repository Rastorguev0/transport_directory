// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport_catalog.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalog_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalog_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "painter.pb.h"
#include "transport_router.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_transport_5fcatalog_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_transport_5fcatalog_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transport_5fcatalog_2eproto;
namespace TCProto {
class BusResponse;
class BusResponseDefaultTypeInternal;
extern BusResponseDefaultTypeInternal _BusResponse_default_instance_;
class StopResponse;
class StopResponseDefaultTypeInternal;
extern StopResponseDefaultTypeInternal _StopResponse_default_instance_;
class TransportCatalog;
class TransportCatalogDefaultTypeInternal;
extern TransportCatalogDefaultTypeInternal _TransportCatalog_default_instance_;
}  // namespace TCProto
PROTOBUF_NAMESPACE_OPEN
template<> ::TCProto::BusResponse* Arena::CreateMaybeMessage<::TCProto::BusResponse>(Arena*);
template<> ::TCProto::StopResponse* Arena::CreateMaybeMessage<::TCProto::StopResponse>(Arena*);
template<> ::TCProto::TransportCatalog* Arena::CreateMaybeMessage<::TCProto::TransportCatalog>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TCProto {

// ===================================================================

class StopResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TCProto.StopResponse) */ {
 public:
  inline StopResponse() : StopResponse(nullptr) {}
  virtual ~StopResponse();

  StopResponse(const StopResponse& from);
  StopResponse(StopResponse&& from) noexcept
    : StopResponse() {
    *this = ::std::move(from);
  }

  inline StopResponse& operator=(const StopResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopResponse& operator=(StopResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopResponse& default_instance();

  static inline const StopResponse* internal_default_instance() {
    return reinterpret_cast<const StopResponse*>(
               &_StopResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StopResponse& a, StopResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StopResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopResponse* New() const final {
    return CreateMaybeMessage<StopResponse>(nullptr);
  }

  StopResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopResponse& from);
  void MergeFrom(const StopResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TCProto.StopResponse";
  }
  protected:
  explicit StopResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5fcatalog_2eproto);
    return ::descriptor_table_transport_5fcatalog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBusNamesFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // repeated string bus_names = 2;
  int bus_names_size() const;
  private:
  int _internal_bus_names_size() const;
  public:
  void clear_bus_names();
  const std::string& bus_names(int index) const;
  std::string* mutable_bus_names(int index);
  void set_bus_names(int index, const std::string& value);
  void set_bus_names(int index, std::string&& value);
  void set_bus_names(int index, const char* value);
  void set_bus_names(int index, const char* value, size_t size);
  std::string* add_bus_names();
  void add_bus_names(const std::string& value);
  void add_bus_names(std::string&& value);
  void add_bus_names(const char* value);
  void add_bus_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& bus_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_bus_names();
  private:
  const std::string& _internal_bus_names(int index) const;
  std::string* _internal_add_bus_names();
  public:

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:TCProto.StopResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> bus_names_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalog_2eproto;
};
// -------------------------------------------------------------------

class BusResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TCProto.BusResponse) */ {
 public:
  inline BusResponse() : BusResponse(nullptr) {}
  virtual ~BusResponse();

  BusResponse(const BusResponse& from);
  BusResponse(BusResponse&& from) noexcept
    : BusResponse() {
    *this = ::std::move(from);
  }

  inline BusResponse& operator=(const BusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BusResponse& operator=(BusResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BusResponse& default_instance();

  static inline const BusResponse* internal_default_instance() {
    return reinterpret_cast<const BusResponse*>(
               &_BusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BusResponse& a, BusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BusResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BusResponse* New() const final {
    return CreateMaybeMessage<BusResponse>(nullptr);
  }

  BusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BusResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BusResponse& from);
  void MergeFrom(const BusResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BusResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TCProto.BusResponse";
  }
  protected:
  explicit BusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5fcatalog_2eproto);
    return ::descriptor_table_transport_5fcatalog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kStopCountFieldNumber = 2,
    kUniqueStopCountFieldNumber = 3,
    kGeoRouteLengthFieldNumber = 5,
    kRoadRouteLengthFieldNumber = 4,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 stop_count = 2;
  void clear_stop_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 stop_count() const;
  void set_stop_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_stop_count() const;
  void _internal_set_stop_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 unique_stop_count = 3;
  void clear_unique_stop_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 unique_stop_count() const;
  void set_unique_stop_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_unique_stop_count() const;
  void _internal_set_unique_stop_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // double geo_route_length = 5;
  void clear_geo_route_length();
  double geo_route_length() const;
  void set_geo_route_length(double value);
  private:
  double _internal_geo_route_length() const;
  void _internal_set_geo_route_length(double value);
  public:

  // uint32 road_route_length = 4;
  void clear_road_route_length();
  ::PROTOBUF_NAMESPACE_ID::uint32 road_route_length() const;
  void set_road_route_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_road_route_length() const;
  void _internal_set_road_route_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TCProto.BusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 stop_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 unique_stop_count_;
  double geo_route_length_;
  ::PROTOBUF_NAMESPACE_ID::uint32 road_route_length_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalog_2eproto;
};
// -------------------------------------------------------------------

class TransportCatalog PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TCProto.TransportCatalog) */ {
 public:
  inline TransportCatalog() : TransportCatalog(nullptr) {}
  virtual ~TransportCatalog();

  TransportCatalog(const TransportCatalog& from);
  TransportCatalog(TransportCatalog&& from) noexcept
    : TransportCatalog() {
    *this = ::std::move(from);
  }

  inline TransportCatalog& operator=(const TransportCatalog& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransportCatalog& operator=(TransportCatalog&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransportCatalog& default_instance();

  static inline const TransportCatalog* internal_default_instance() {
    return reinterpret_cast<const TransportCatalog*>(
               &_TransportCatalog_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TransportCatalog& a, TransportCatalog& b) {
    a.Swap(&b);
  }
  inline void Swap(TransportCatalog* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransportCatalog* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransportCatalog* New() const final {
    return CreateMaybeMessage<TransportCatalog>(nullptr);
  }

  TransportCatalog* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransportCatalog>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransportCatalog& from);
  void MergeFrom(const TransportCatalog& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransportCatalog* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TCProto.TransportCatalog";
  }
  protected:
  explicit TransportCatalog(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5fcatalog_2eproto);
    return ::descriptor_table_transport_5fcatalog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStopsFieldNumber = 1,
    kBusesFieldNumber = 2,
    kRouterFieldNumber = 3,
    kPainterFieldNumber = 4,
  };
  // repeated .TCProto.StopResponse stops = 1;
  int stops_size() const;
  private:
  int _internal_stops_size() const;
  public:
  void clear_stops();
  ::TCProto::StopResponse* mutable_stops(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TCProto::StopResponse >*
      mutable_stops();
  private:
  const ::TCProto::StopResponse& _internal_stops(int index) const;
  ::TCProto::StopResponse* _internal_add_stops();
  public:
  const ::TCProto::StopResponse& stops(int index) const;
  ::TCProto::StopResponse* add_stops();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TCProto::StopResponse >&
      stops() const;

  // repeated .TCProto.BusResponse buses = 2;
  int buses_size() const;
  private:
  int _internal_buses_size() const;
  public:
  void clear_buses();
  ::TCProto::BusResponse* mutable_buses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TCProto::BusResponse >*
      mutable_buses();
  private:
  const ::TCProto::BusResponse& _internal_buses(int index) const;
  ::TCProto::BusResponse* _internal_add_buses();
  public:
  const ::TCProto::BusResponse& buses(int index) const;
  ::TCProto::BusResponse* add_buses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TCProto::BusResponse >&
      buses() const;

  // .TCProto.TransportRouter router = 3;
  bool has_router() const;
  private:
  bool _internal_has_router() const;
  public:
  void clear_router();
  const ::TCProto::TransportRouter& router() const;
  ::TCProto::TransportRouter* release_router();
  ::TCProto::TransportRouter* mutable_router();
  void set_allocated_router(::TCProto::TransportRouter* router);
  private:
  const ::TCProto::TransportRouter& _internal_router() const;
  ::TCProto::TransportRouter* _internal_mutable_router();
  public:
  void unsafe_arena_set_allocated_router(
      ::TCProto::TransportRouter* router);
  ::TCProto::TransportRouter* unsafe_arena_release_router();

  // .TCProto.Painter painter = 4;
  bool has_painter() const;
  private:
  bool _internal_has_painter() const;
  public:
  void clear_painter();
  const ::TCProto::Painter& painter() const;
  ::TCProto::Painter* release_painter();
  ::TCProto::Painter* mutable_painter();
  void set_allocated_painter(::TCProto::Painter* painter);
  private:
  const ::TCProto::Painter& _internal_painter() const;
  ::TCProto::Painter* _internal_mutable_painter();
  public:
  void unsafe_arena_set_allocated_painter(
      ::TCProto::Painter* painter);
  ::TCProto::Painter* unsafe_arena_release_painter();

  // @@protoc_insertion_point(class_scope:TCProto.TransportCatalog)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TCProto::StopResponse > stops_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TCProto::BusResponse > buses_;
  ::TCProto::TransportRouter* router_;
  ::TCProto::Painter* painter_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalog_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StopResponse

// string name = 1;
inline void StopResponse::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& StopResponse::name() const {
  // @@protoc_insertion_point(field_get:TCProto.StopResponse.name)
  return _internal_name();
}
inline void StopResponse::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:TCProto.StopResponse.name)
}
inline std::string* StopResponse::mutable_name() {
  // @@protoc_insertion_point(field_mutable:TCProto.StopResponse.name)
  return _internal_mutable_name();
}
inline const std::string& StopResponse::_internal_name() const {
  return name_.Get();
}
inline void StopResponse::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StopResponse::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TCProto.StopResponse.name)
}
inline void StopResponse::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TCProto.StopResponse.name)
}
inline void StopResponse::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TCProto.StopResponse.name)
}
inline std::string* StopResponse::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StopResponse::release_name() {
  // @@protoc_insertion_point(field_release:TCProto.StopResponse.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StopResponse::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TCProto.StopResponse.name)
}

// repeated string bus_names = 2;
inline int StopResponse::_internal_bus_names_size() const {
  return bus_names_.size();
}
inline int StopResponse::bus_names_size() const {
  return _internal_bus_names_size();
}
inline void StopResponse::clear_bus_names() {
  bus_names_.Clear();
}
inline std::string* StopResponse::add_bus_names() {
  // @@protoc_insertion_point(field_add_mutable:TCProto.StopResponse.bus_names)
  return _internal_add_bus_names();
}
inline const std::string& StopResponse::_internal_bus_names(int index) const {
  return bus_names_.Get(index);
}
inline const std::string& StopResponse::bus_names(int index) const {
  // @@protoc_insertion_point(field_get:TCProto.StopResponse.bus_names)
  return _internal_bus_names(index);
}
inline std::string* StopResponse::mutable_bus_names(int index) {
  // @@protoc_insertion_point(field_mutable:TCProto.StopResponse.bus_names)
  return bus_names_.Mutable(index);
}
inline void StopResponse::set_bus_names(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:TCProto.StopResponse.bus_names)
  bus_names_.Mutable(index)->assign(value);
}
inline void StopResponse::set_bus_names(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:TCProto.StopResponse.bus_names)
  bus_names_.Mutable(index)->assign(std::move(value));
}
inline void StopResponse::set_bus_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  bus_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TCProto.StopResponse.bus_names)
}
inline void StopResponse::set_bus_names(int index, const char* value, size_t size) {
  bus_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TCProto.StopResponse.bus_names)
}
inline std::string* StopResponse::_internal_add_bus_names() {
  return bus_names_.Add();
}
inline void StopResponse::add_bus_names(const std::string& value) {
  bus_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TCProto.StopResponse.bus_names)
}
inline void StopResponse::add_bus_names(std::string&& value) {
  bus_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TCProto.StopResponse.bus_names)
}
inline void StopResponse::add_bus_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  bus_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TCProto.StopResponse.bus_names)
}
inline void StopResponse::add_bus_names(const char* value, size_t size) {
  bus_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TCProto.StopResponse.bus_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StopResponse::bus_names() const {
  // @@protoc_insertion_point(field_list:TCProto.StopResponse.bus_names)
  return bus_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StopResponse::mutable_bus_names() {
  // @@protoc_insertion_point(field_mutable_list:TCProto.StopResponse.bus_names)
  return &bus_names_;
}

// -------------------------------------------------------------------

// BusResponse

// string name = 1;
inline void BusResponse::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& BusResponse::name() const {
  // @@protoc_insertion_point(field_get:TCProto.BusResponse.name)
  return _internal_name();
}
inline void BusResponse::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:TCProto.BusResponse.name)
}
inline std::string* BusResponse::mutable_name() {
  // @@protoc_insertion_point(field_mutable:TCProto.BusResponse.name)
  return _internal_mutable_name();
}
inline const std::string& BusResponse::_internal_name() const {
  return name_.Get();
}
inline void BusResponse::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BusResponse::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TCProto.BusResponse.name)
}
inline void BusResponse::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TCProto.BusResponse.name)
}
inline void BusResponse::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TCProto.BusResponse.name)
}
inline std::string* BusResponse::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BusResponse::release_name() {
  // @@protoc_insertion_point(field_release:TCProto.BusResponse.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BusResponse::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TCProto.BusResponse.name)
}

// uint32 stop_count = 2;
inline void BusResponse::clear_stop_count() {
  stop_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BusResponse::_internal_stop_count() const {
  return stop_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BusResponse::stop_count() const {
  // @@protoc_insertion_point(field_get:TCProto.BusResponse.stop_count)
  return _internal_stop_count();
}
inline void BusResponse::_internal_set_stop_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  stop_count_ = value;
}
inline void BusResponse::set_stop_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_stop_count(value);
  // @@protoc_insertion_point(field_set:TCProto.BusResponse.stop_count)
}

// uint32 unique_stop_count = 3;
inline void BusResponse::clear_unique_stop_count() {
  unique_stop_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BusResponse::_internal_unique_stop_count() const {
  return unique_stop_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BusResponse::unique_stop_count() const {
  // @@protoc_insertion_point(field_get:TCProto.BusResponse.unique_stop_count)
  return _internal_unique_stop_count();
}
inline void BusResponse::_internal_set_unique_stop_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  unique_stop_count_ = value;
}
inline void BusResponse::set_unique_stop_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_unique_stop_count(value);
  // @@protoc_insertion_point(field_set:TCProto.BusResponse.unique_stop_count)
}

// uint32 road_route_length = 4;
inline void BusResponse::clear_road_route_length() {
  road_route_length_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BusResponse::_internal_road_route_length() const {
  return road_route_length_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BusResponse::road_route_length() const {
  // @@protoc_insertion_point(field_get:TCProto.BusResponse.road_route_length)
  return _internal_road_route_length();
}
inline void BusResponse::_internal_set_road_route_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  road_route_length_ = value;
}
inline void BusResponse::set_road_route_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_road_route_length(value);
  // @@protoc_insertion_point(field_set:TCProto.BusResponse.road_route_length)
}

// double geo_route_length = 5;
inline void BusResponse::clear_geo_route_length() {
  geo_route_length_ = 0;
}
inline double BusResponse::_internal_geo_route_length() const {
  return geo_route_length_;
}
inline double BusResponse::geo_route_length() const {
  // @@protoc_insertion_point(field_get:TCProto.BusResponse.geo_route_length)
  return _internal_geo_route_length();
}
inline void BusResponse::_internal_set_geo_route_length(double value) {
  
  geo_route_length_ = value;
}
inline void BusResponse::set_geo_route_length(double value) {
  _internal_set_geo_route_length(value);
  // @@protoc_insertion_point(field_set:TCProto.BusResponse.geo_route_length)
}

// -------------------------------------------------------------------

// TransportCatalog

// repeated .TCProto.StopResponse stops = 1;
inline int TransportCatalog::_internal_stops_size() const {
  return stops_.size();
}
inline int TransportCatalog::stops_size() const {
  return _internal_stops_size();
}
inline void TransportCatalog::clear_stops() {
  stops_.Clear();
}
inline ::TCProto::StopResponse* TransportCatalog::mutable_stops(int index) {
  // @@protoc_insertion_point(field_mutable:TCProto.TransportCatalog.stops)
  return stops_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TCProto::StopResponse >*
TransportCatalog::mutable_stops() {
  // @@protoc_insertion_point(field_mutable_list:TCProto.TransportCatalog.stops)
  return &stops_;
}
inline const ::TCProto::StopResponse& TransportCatalog::_internal_stops(int index) const {
  return stops_.Get(index);
}
inline const ::TCProto::StopResponse& TransportCatalog::stops(int index) const {
  // @@protoc_insertion_point(field_get:TCProto.TransportCatalog.stops)
  return _internal_stops(index);
}
inline ::TCProto::StopResponse* TransportCatalog::_internal_add_stops() {
  return stops_.Add();
}
inline ::TCProto::StopResponse* TransportCatalog::add_stops() {
  // @@protoc_insertion_point(field_add:TCProto.TransportCatalog.stops)
  return _internal_add_stops();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TCProto::StopResponse >&
TransportCatalog::stops() const {
  // @@protoc_insertion_point(field_list:TCProto.TransportCatalog.stops)
  return stops_;
}

// repeated .TCProto.BusResponse buses = 2;
inline int TransportCatalog::_internal_buses_size() const {
  return buses_.size();
}
inline int TransportCatalog::buses_size() const {
  return _internal_buses_size();
}
inline void TransportCatalog::clear_buses() {
  buses_.Clear();
}
inline ::TCProto::BusResponse* TransportCatalog::mutable_buses(int index) {
  // @@protoc_insertion_point(field_mutable:TCProto.TransportCatalog.buses)
  return buses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TCProto::BusResponse >*
TransportCatalog::mutable_buses() {
  // @@protoc_insertion_point(field_mutable_list:TCProto.TransportCatalog.buses)
  return &buses_;
}
inline const ::TCProto::BusResponse& TransportCatalog::_internal_buses(int index) const {
  return buses_.Get(index);
}
inline const ::TCProto::BusResponse& TransportCatalog::buses(int index) const {
  // @@protoc_insertion_point(field_get:TCProto.TransportCatalog.buses)
  return _internal_buses(index);
}
inline ::TCProto::BusResponse* TransportCatalog::_internal_add_buses() {
  return buses_.Add();
}
inline ::TCProto::BusResponse* TransportCatalog::add_buses() {
  // @@protoc_insertion_point(field_add:TCProto.TransportCatalog.buses)
  return _internal_add_buses();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TCProto::BusResponse >&
TransportCatalog::buses() const {
  // @@protoc_insertion_point(field_list:TCProto.TransportCatalog.buses)
  return buses_;
}

// .TCProto.TransportRouter router = 3;
inline bool TransportCatalog::_internal_has_router() const {
  return this != internal_default_instance() && router_ != nullptr;
}
inline bool TransportCatalog::has_router() const {
  return _internal_has_router();
}
inline const ::TCProto::TransportRouter& TransportCatalog::_internal_router() const {
  const ::TCProto::TransportRouter* p = router_;
  return p != nullptr ? *p : reinterpret_cast<const ::TCProto::TransportRouter&>(
      ::TCProto::_TransportRouter_default_instance_);
}
inline const ::TCProto::TransportRouter& TransportCatalog::router() const {
  // @@protoc_insertion_point(field_get:TCProto.TransportCatalog.router)
  return _internal_router();
}
inline void TransportCatalog::unsafe_arena_set_allocated_router(
    ::TCProto::TransportRouter* router) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(router_);
  }
  router_ = router;
  if (router) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TCProto.TransportCatalog.router)
}
inline ::TCProto::TransportRouter* TransportCatalog::release_router() {
  
  ::TCProto::TransportRouter* temp = router_;
  router_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TCProto::TransportRouter* TransportCatalog::unsafe_arena_release_router() {
  // @@protoc_insertion_point(field_release:TCProto.TransportCatalog.router)
  
  ::TCProto::TransportRouter* temp = router_;
  router_ = nullptr;
  return temp;
}
inline ::TCProto::TransportRouter* TransportCatalog::_internal_mutable_router() {
  
  if (router_ == nullptr) {
    auto* p = CreateMaybeMessage<::TCProto::TransportRouter>(GetArena());
    router_ = p;
  }
  return router_;
}
inline ::TCProto::TransportRouter* TransportCatalog::mutable_router() {
  // @@protoc_insertion_point(field_mutable:TCProto.TransportCatalog.router)
  return _internal_mutable_router();
}
inline void TransportCatalog::set_allocated_router(::TCProto::TransportRouter* router) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(router_);
  }
  if (router) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(router)->GetArena();
    if (message_arena != submessage_arena) {
      router = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, router, submessage_arena);
    }
    
  } else {
    
  }
  router_ = router;
  // @@protoc_insertion_point(field_set_allocated:TCProto.TransportCatalog.router)
}

// .TCProto.Painter painter = 4;
inline bool TransportCatalog::_internal_has_painter() const {
  return this != internal_default_instance() && painter_ != nullptr;
}
inline bool TransportCatalog::has_painter() const {
  return _internal_has_painter();
}
inline const ::TCProto::Painter& TransportCatalog::_internal_painter() const {
  const ::TCProto::Painter* p = painter_;
  return p != nullptr ? *p : reinterpret_cast<const ::TCProto::Painter&>(
      ::TCProto::_Painter_default_instance_);
}
inline const ::TCProto::Painter& TransportCatalog::painter() const {
  // @@protoc_insertion_point(field_get:TCProto.TransportCatalog.painter)
  return _internal_painter();
}
inline void TransportCatalog::unsafe_arena_set_allocated_painter(
    ::TCProto::Painter* painter) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(painter_);
  }
  painter_ = painter;
  if (painter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TCProto.TransportCatalog.painter)
}
inline ::TCProto::Painter* TransportCatalog::release_painter() {
  
  ::TCProto::Painter* temp = painter_;
  painter_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TCProto::Painter* TransportCatalog::unsafe_arena_release_painter() {
  // @@protoc_insertion_point(field_release:TCProto.TransportCatalog.painter)
  
  ::TCProto::Painter* temp = painter_;
  painter_ = nullptr;
  return temp;
}
inline ::TCProto::Painter* TransportCatalog::_internal_mutable_painter() {
  
  if (painter_ == nullptr) {
    auto* p = CreateMaybeMessage<::TCProto::Painter>(GetArena());
    painter_ = p;
  }
  return painter_;
}
inline ::TCProto::Painter* TransportCatalog::mutable_painter() {
  // @@protoc_insertion_point(field_mutable:TCProto.TransportCatalog.painter)
  return _internal_mutable_painter();
}
inline void TransportCatalog::set_allocated_painter(::TCProto::Painter* painter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(painter_);
  }
  if (painter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(painter)->GetArena();
    if (message_arena != submessage_arena) {
      painter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, painter, submessage_arena);
    }
    
  } else {
    
  }
  painter_ = painter;
  // @@protoc_insertion_point(field_set_allocated:TCProto.TransportCatalog.painter)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace TCProto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalog_2eproto
