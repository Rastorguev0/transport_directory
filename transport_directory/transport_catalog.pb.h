// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport_catalog.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalog_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalog_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_transport_5fcatalog_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_transport_5fcatalog_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[17]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transport_5fcatalog_2eproto;
namespace Serialize {
class BusEdgeInfo;
class BusEdgeInfoDefaultTypeInternal;
extern BusEdgeInfoDefaultTypeInternal _BusEdgeInfo_default_instance_;
class BusGraph;
class BusGraphDefaultTypeInternal;
extern BusGraphDefaultTypeInternal _BusGraph_default_instance_;
class BusRequest;
class BusRequestDefaultTypeInternal;
extern BusRequestDefaultTypeInternal _BusRequest_default_instance_;
class Edge;
class EdgeDefaultTypeInternal;
extern EdgeDefaultTypeInternal _Edge_default_instance_;
class EdgeInfo;
class EdgeInfoDefaultTypeInternal;
extern EdgeInfoDefaultTypeInternal _EdgeInfo_default_instance_;
class IncidenceList;
class IncidenceListDefaultTypeInternal;
extern IncidenceListDefaultTypeInternal _IncidenceList_default_instance_;
class RouteData;
class RouteDataDefaultTypeInternal;
extern RouteDataDefaultTypeInternal _RouteData_default_instance_;
class RouteInternalData;
class RouteInternalDataDefaultTypeInternal;
extern RouteInternalDataDefaultTypeInternal _RouteInternalData_default_instance_;
class Router;
class RouterDefaultTypeInternal;
extern RouterDefaultTypeInternal _Router_default_instance_;
class RoutesInternalData;
class RoutesInternalDataDefaultTypeInternal;
extern RoutesInternalDataDefaultTypeInternal _RoutesInternalData_default_instance_;
class RoutingSettings;
class RoutingSettingsDefaultTypeInternal;
extern RoutingSettingsDefaultTypeInternal _RoutingSettings_default_instance_;
class StopRequest;
class StopRequestDefaultTypeInternal;
extern StopRequestDefaultTypeInternal _StopRequest_default_instance_;
class StopVertexIdx;
class StopVertexIdxDefaultTypeInternal;
extern StopVertexIdxDefaultTypeInternal _StopVertexIdx_default_instance_;
class TransportCatalog;
class TransportCatalogDefaultTypeInternal;
extern TransportCatalogDefaultTypeInternal _TransportCatalog_default_instance_;
class TransportRouter;
class TransportRouterDefaultTypeInternal;
extern TransportRouterDefaultTypeInternal _TransportRouter_default_instance_;
class VertexInfo;
class VertexInfoDefaultTypeInternal;
extern VertexInfoDefaultTypeInternal _VertexInfo_default_instance_;
class WaitEdgeInfo;
class WaitEdgeInfoDefaultTypeInternal;
extern WaitEdgeInfoDefaultTypeInternal _WaitEdgeInfo_default_instance_;
}  // namespace Serialize
PROTOBUF_NAMESPACE_OPEN
template<> ::Serialize::BusEdgeInfo* Arena::CreateMaybeMessage<::Serialize::BusEdgeInfo>(Arena*);
template<> ::Serialize::BusGraph* Arena::CreateMaybeMessage<::Serialize::BusGraph>(Arena*);
template<> ::Serialize::BusRequest* Arena::CreateMaybeMessage<::Serialize::BusRequest>(Arena*);
template<> ::Serialize::Edge* Arena::CreateMaybeMessage<::Serialize::Edge>(Arena*);
template<> ::Serialize::EdgeInfo* Arena::CreateMaybeMessage<::Serialize::EdgeInfo>(Arena*);
template<> ::Serialize::IncidenceList* Arena::CreateMaybeMessage<::Serialize::IncidenceList>(Arena*);
template<> ::Serialize::RouteData* Arena::CreateMaybeMessage<::Serialize::RouteData>(Arena*);
template<> ::Serialize::RouteInternalData* Arena::CreateMaybeMessage<::Serialize::RouteInternalData>(Arena*);
template<> ::Serialize::Router* Arena::CreateMaybeMessage<::Serialize::Router>(Arena*);
template<> ::Serialize::RoutesInternalData* Arena::CreateMaybeMessage<::Serialize::RoutesInternalData>(Arena*);
template<> ::Serialize::RoutingSettings* Arena::CreateMaybeMessage<::Serialize::RoutingSettings>(Arena*);
template<> ::Serialize::StopRequest* Arena::CreateMaybeMessage<::Serialize::StopRequest>(Arena*);
template<> ::Serialize::StopVertexIdx* Arena::CreateMaybeMessage<::Serialize::StopVertexIdx>(Arena*);
template<> ::Serialize::TransportCatalog* Arena::CreateMaybeMessage<::Serialize::TransportCatalog>(Arena*);
template<> ::Serialize::TransportRouter* Arena::CreateMaybeMessage<::Serialize::TransportRouter>(Arena*);
template<> ::Serialize::VertexInfo* Arena::CreateMaybeMessage<::Serialize::VertexInfo>(Arena*);
template<> ::Serialize::WaitEdgeInfo* Arena::CreateMaybeMessage<::Serialize::WaitEdgeInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Serialize {

// ===================================================================

class StopRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Serialize.StopRequest) */ {
 public:
  inline StopRequest() : StopRequest(nullptr) {}
  virtual ~StopRequest();

  StopRequest(const StopRequest& from);
  StopRequest(StopRequest&& from) noexcept
    : StopRequest() {
    *this = ::std::move(from);
  }

  inline StopRequest& operator=(const StopRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopRequest& operator=(StopRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopRequest& default_instance();

  static inline const StopRequest* internal_default_instance() {
    return reinterpret_cast<const StopRequest*>(
               &_StopRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StopRequest& a, StopRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StopRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopRequest* New() const final {
    return CreateMaybeMessage<StopRequest>(nullptr);
  }

  StopRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopRequest& from);
  void MergeFrom(const StopRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Serialize.StopRequest";
  }
  protected:
  explicit StopRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5fcatalog_2eproto);
    return ::descriptor_table_transport_5fcatalog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBusesFieldNumber = 2,
    kStopFieldNumber = 1,
  };
  // repeated string buses = 2;
  int buses_size() const;
  private:
  int _internal_buses_size() const;
  public:
  void clear_buses();
  const std::string& buses(int index) const;
  std::string* mutable_buses(int index);
  void set_buses(int index, const std::string& value);
  void set_buses(int index, std::string&& value);
  void set_buses(int index, const char* value);
  void set_buses(int index, const char* value, size_t size);
  std::string* add_buses();
  void add_buses(const std::string& value);
  void add_buses(std::string&& value);
  void add_buses(const char* value);
  void add_buses(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& buses() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_buses();
  private:
  const std::string& _internal_buses(int index) const;
  std::string* _internal_add_buses();
  public:

  // string stop = 1;
  void clear_stop();
  const std::string& stop() const;
  void set_stop(const std::string& value);
  void set_stop(std::string&& value);
  void set_stop(const char* value);
  void set_stop(const char* value, size_t size);
  std::string* mutable_stop();
  std::string* release_stop();
  void set_allocated_stop(std::string* stop);
  private:
  const std::string& _internal_stop() const;
  void _internal_set_stop(const std::string& value);
  std::string* _internal_mutable_stop();
  public:

  // @@protoc_insertion_point(class_scope:Serialize.StopRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> buses_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stop_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalog_2eproto;
};
// -------------------------------------------------------------------

class BusRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Serialize.BusRequest) */ {
 public:
  inline BusRequest() : BusRequest(nullptr) {}
  virtual ~BusRequest();

  BusRequest(const BusRequest& from);
  BusRequest(BusRequest&& from) noexcept
    : BusRequest() {
    *this = ::std::move(from);
  }

  inline BusRequest& operator=(const BusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BusRequest& operator=(BusRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BusRequest& default_instance();

  static inline const BusRequest* internal_default_instance() {
    return reinterpret_cast<const BusRequest*>(
               &_BusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BusRequest& a, BusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BusRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BusRequest* New() const final {
    return CreateMaybeMessage<BusRequest>(nullptr);
  }

  BusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BusRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BusRequest& from);
  void MergeFrom(const BusRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BusRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Serialize.BusRequest";
  }
  protected:
  explicit BusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5fcatalog_2eproto);
    return ::descriptor_table_transport_5fcatalog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBusFieldNumber = 1,
    kStopCountFieldNumber = 2,
    kUniqueStopCountFieldNumber = 3,
    kRoadLengthFieldNumber = 4,
    kGeoRoadLengthFieldNumber = 5,
  };
  // string bus = 1;
  void clear_bus();
  const std::string& bus() const;
  void set_bus(const std::string& value);
  void set_bus(std::string&& value);
  void set_bus(const char* value);
  void set_bus(const char* value, size_t size);
  std::string* mutable_bus();
  std::string* release_bus();
  void set_allocated_bus(std::string* bus);
  private:
  const std::string& _internal_bus() const;
  void _internal_set_bus(const std::string& value);
  std::string* _internal_mutable_bus();
  public:

  // uint32 stop_count = 2;
  void clear_stop_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 stop_count() const;
  void set_stop_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_stop_count() const;
  void _internal_set_stop_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 unique_stop_count = 3;
  void clear_unique_stop_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 unique_stop_count() const;
  void set_unique_stop_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_unique_stop_count() const;
  void _internal_set_unique_stop_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 road_length = 4;
  void clear_road_length();
  ::PROTOBUF_NAMESPACE_ID::uint32 road_length() const;
  void set_road_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_road_length() const;
  void _internal_set_road_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float geo_road_length = 5;
  void clear_geo_road_length();
  float geo_road_length() const;
  void set_geo_road_length(float value);
  private:
  float _internal_geo_road_length() const;
  void _internal_set_geo_road_length(float value);
  public:

  // @@protoc_insertion_point(class_scope:Serialize.BusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bus_;
  ::PROTOBUF_NAMESPACE_ID::uint32 stop_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 unique_stop_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 road_length_;
  float geo_road_length_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalog_2eproto;
};
// -------------------------------------------------------------------

class Edge PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Serialize.Edge) */ {
 public:
  inline Edge() : Edge(nullptr) {}
  virtual ~Edge();

  Edge(const Edge& from);
  Edge(Edge&& from) noexcept
    : Edge() {
    *this = ::std::move(from);
  }

  inline Edge& operator=(const Edge& from) {
    CopyFrom(from);
    return *this;
  }
  inline Edge& operator=(Edge&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Edge& default_instance();

  static inline const Edge* internal_default_instance() {
    return reinterpret_cast<const Edge*>(
               &_Edge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Edge& a, Edge& b) {
    a.Swap(&b);
  }
  inline void Swap(Edge* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Edge* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Edge* New() const final {
    return CreateMaybeMessage<Edge>(nullptr);
  }

  Edge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Edge>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Edge& from);
  void MergeFrom(const Edge& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Edge* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Serialize.Edge";
  }
  protected:
  explicit Edge(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5fcatalog_2eproto);
    return ::descriptor_table_transport_5fcatalog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromFieldNumber = 1,
    kToFieldNumber = 2,
    kWeightFieldNumber = 3,
  };
  // uint32 from = 1;
  void clear_from();
  ::PROTOBUF_NAMESPACE_ID::uint32 from() const;
  void set_from(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_from() const;
  void _internal_set_from(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 to = 2;
  void clear_to();
  ::PROTOBUF_NAMESPACE_ID::uint32 to() const;
  void set_to(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_to() const;
  void _internal_set_to(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // double weight = 3;
  void clear_weight();
  double weight() const;
  void set_weight(double value);
  private:
  double _internal_weight() const;
  void _internal_set_weight(double value);
  public:

  // @@protoc_insertion_point(class_scope:Serialize.Edge)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 from_;
  ::PROTOBUF_NAMESPACE_ID::uint32 to_;
  double weight_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalog_2eproto;
};
// -------------------------------------------------------------------

class IncidenceList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Serialize.IncidenceList) */ {
 public:
  inline IncidenceList() : IncidenceList(nullptr) {}
  virtual ~IncidenceList();

  IncidenceList(const IncidenceList& from);
  IncidenceList(IncidenceList&& from) noexcept
    : IncidenceList() {
    *this = ::std::move(from);
  }

  inline IncidenceList& operator=(const IncidenceList& from) {
    CopyFrom(from);
    return *this;
  }
  inline IncidenceList& operator=(IncidenceList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IncidenceList& default_instance();

  static inline const IncidenceList* internal_default_instance() {
    return reinterpret_cast<const IncidenceList*>(
               &_IncidenceList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(IncidenceList& a, IncidenceList& b) {
    a.Swap(&b);
  }
  inline void Swap(IncidenceList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IncidenceList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IncidenceList* New() const final {
    return CreateMaybeMessage<IncidenceList>(nullptr);
  }

  IncidenceList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IncidenceList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IncidenceList& from);
  void MergeFrom(const IncidenceList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IncidenceList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Serialize.IncidenceList";
  }
  protected:
  explicit IncidenceList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5fcatalog_2eproto);
    return ::descriptor_table_transport_5fcatalog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEdgeIdsFieldNumber = 1,
  };
  // repeated uint32 edge_ids = 1;
  int edge_ids_size() const;
  private:
  int _internal_edge_ids_size() const;
  public:
  void clear_edge_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_edge_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_edge_ids() const;
  void _internal_add_edge_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_edge_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 edge_ids(int index) const;
  void set_edge_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_edge_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      edge_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_edge_ids();

  // @@protoc_insertion_point(class_scope:Serialize.IncidenceList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > edge_ids_;
  mutable std::atomic<int> _edge_ids_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalog_2eproto;
};
// -------------------------------------------------------------------

class BusGraph PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Serialize.BusGraph) */ {
 public:
  inline BusGraph() : BusGraph(nullptr) {}
  virtual ~BusGraph();

  BusGraph(const BusGraph& from);
  BusGraph(BusGraph&& from) noexcept
    : BusGraph() {
    *this = ::std::move(from);
  }

  inline BusGraph& operator=(const BusGraph& from) {
    CopyFrom(from);
    return *this;
  }
  inline BusGraph& operator=(BusGraph&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BusGraph& default_instance();

  static inline const BusGraph* internal_default_instance() {
    return reinterpret_cast<const BusGraph*>(
               &_BusGraph_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(BusGraph& a, BusGraph& b) {
    a.Swap(&b);
  }
  inline void Swap(BusGraph* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BusGraph* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BusGraph* New() const final {
    return CreateMaybeMessage<BusGraph>(nullptr);
  }

  BusGraph* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BusGraph>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BusGraph& from);
  void MergeFrom(const BusGraph& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BusGraph* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Serialize.BusGraph";
  }
  protected:
  explicit BusGraph(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5fcatalog_2eproto);
    return ::descriptor_table_transport_5fcatalog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEdgesFieldNumber = 1,
    kIncidenceListsFieldNumber = 2,
  };
  // repeated .Serialize.Edge edges_ = 1;
  int edges__size() const;
  private:
  int _internal_edges__size() const;
  public:
  void clear_edges_();
  ::Serialize::Edge* mutable_edges_(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialize::Edge >*
      mutable_edges_();
  private:
  const ::Serialize::Edge& _internal_edges_(int index) const;
  ::Serialize::Edge* _internal_add_edges_();
  public:
  const ::Serialize::Edge& edges_(int index) const;
  ::Serialize::Edge* add_edges_();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialize::Edge >&
      edges_() const;

  // repeated .Serialize.IncidenceList incidence_lists_ = 2;
  int incidence_lists__size() const;
  private:
  int _internal_incidence_lists__size() const;
  public:
  void clear_incidence_lists_();
  ::Serialize::IncidenceList* mutable_incidence_lists_(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialize::IncidenceList >*
      mutable_incidence_lists_();
  private:
  const ::Serialize::IncidenceList& _internal_incidence_lists_(int index) const;
  ::Serialize::IncidenceList* _internal_add_incidence_lists_();
  public:
  const ::Serialize::IncidenceList& incidence_lists_(int index) const;
  ::Serialize::IncidenceList* add_incidence_lists_();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialize::IncidenceList >&
      incidence_lists_() const;

  // @@protoc_insertion_point(class_scope:Serialize.BusGraph)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialize::Edge > edges__;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialize::IncidenceList > incidence_lists__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalog_2eproto;
};
// -------------------------------------------------------------------

class RouteData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Serialize.RouteData) */ {
 public:
  inline RouteData() : RouteData(nullptr) {}
  virtual ~RouteData();

  RouteData(const RouteData& from);
  RouteData(RouteData&& from) noexcept
    : RouteData() {
    *this = ::std::move(from);
  }

  inline RouteData& operator=(const RouteData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RouteData& operator=(RouteData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RouteData& default_instance();

  static inline const RouteData* internal_default_instance() {
    return reinterpret_cast<const RouteData*>(
               &_RouteData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RouteData& a, RouteData& b) {
    a.Swap(&b);
  }
  inline void Swap(RouteData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RouteData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RouteData* New() const final {
    return CreateMaybeMessage<RouteData>(nullptr);
  }

  RouteData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RouteData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RouteData& from);
  void MergeFrom(const RouteData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RouteData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Serialize.RouteData";
  }
  protected:
  explicit RouteData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5fcatalog_2eproto);
    return ::descriptor_table_transport_5fcatalog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWeightFieldNumber = 1,
    kHasFieldNumber = 2,
    kPrevEdgeFieldNumber = 3,
  };
  // double weight = 1;
  void clear_weight();
  double weight() const;
  void set_weight(double value);
  private:
  double _internal_weight() const;
  void _internal_set_weight(double value);
  public:

  // bool has = 2;
  void clear_has();
  bool has() const;
  void set_has(bool value);
  private:
  bool _internal_has() const;
  void _internal_set_has(bool value);
  public:

  // uint32 prev_edge = 3;
  void clear_prev_edge();
  ::PROTOBUF_NAMESPACE_ID::uint32 prev_edge() const;
  void set_prev_edge(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_prev_edge() const;
  void _internal_set_prev_edge(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Serialize.RouteData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double weight_;
  bool has_;
  ::PROTOBUF_NAMESPACE_ID::uint32 prev_edge_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalog_2eproto;
};
// -------------------------------------------------------------------

class RouteInternalData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Serialize.RouteInternalData) */ {
 public:
  inline RouteInternalData() : RouteInternalData(nullptr) {}
  virtual ~RouteInternalData();

  RouteInternalData(const RouteInternalData& from);
  RouteInternalData(RouteInternalData&& from) noexcept
    : RouteInternalData() {
    *this = ::std::move(from);
  }

  inline RouteInternalData& operator=(const RouteInternalData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RouteInternalData& operator=(RouteInternalData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RouteInternalData& default_instance();

  static inline const RouteInternalData* internal_default_instance() {
    return reinterpret_cast<const RouteInternalData*>(
               &_RouteInternalData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RouteInternalData& a, RouteInternalData& b) {
    a.Swap(&b);
  }
  inline void Swap(RouteInternalData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RouteInternalData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RouteInternalData* New() const final {
    return CreateMaybeMessage<RouteInternalData>(nullptr);
  }

  RouteInternalData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RouteInternalData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RouteInternalData& from);
  void MergeFrom(const RouteInternalData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RouteInternalData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Serialize.RouteInternalData";
  }
  protected:
  explicit RouteInternalData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5fcatalog_2eproto);
    return ::descriptor_table_transport_5fcatalog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kHasFieldNumber = 1,
  };
  // .Serialize.RouteData data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::Serialize::RouteData& data() const;
  ::Serialize::RouteData* release_data();
  ::Serialize::RouteData* mutable_data();
  void set_allocated_data(::Serialize::RouteData* data);
  private:
  const ::Serialize::RouteData& _internal_data() const;
  ::Serialize::RouteData* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::Serialize::RouteData* data);
  ::Serialize::RouteData* unsafe_arena_release_data();

  // bool has = 1;
  void clear_has();
  bool has() const;
  void set_has(bool value);
  private:
  bool _internal_has() const;
  void _internal_set_has(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Serialize.RouteInternalData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Serialize::RouteData* data_;
  bool has_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalog_2eproto;
};
// -------------------------------------------------------------------

class RoutesInternalData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Serialize.RoutesInternalData) */ {
 public:
  inline RoutesInternalData() : RoutesInternalData(nullptr) {}
  virtual ~RoutesInternalData();

  RoutesInternalData(const RoutesInternalData& from);
  RoutesInternalData(RoutesInternalData&& from) noexcept
    : RoutesInternalData() {
    *this = ::std::move(from);
  }

  inline RoutesInternalData& operator=(const RoutesInternalData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoutesInternalData& operator=(RoutesInternalData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoutesInternalData& default_instance();

  static inline const RoutesInternalData* internal_default_instance() {
    return reinterpret_cast<const RoutesInternalData*>(
               &_RoutesInternalData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(RoutesInternalData& a, RoutesInternalData& b) {
    a.Swap(&b);
  }
  inline void Swap(RoutesInternalData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoutesInternalData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoutesInternalData* New() const final {
    return CreateMaybeMessage<RoutesInternalData>(nullptr);
  }

  RoutesInternalData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoutesInternalData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoutesInternalData& from);
  void MergeFrom(const RoutesInternalData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoutesInternalData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Serialize.RoutesInternalData";
  }
  protected:
  explicit RoutesInternalData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5fcatalog_2eproto);
    return ::descriptor_table_transport_5fcatalog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated .Serialize.RouteInternalData data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::Serialize::RouteInternalData* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialize::RouteInternalData >*
      mutable_data();
  private:
  const ::Serialize::RouteInternalData& _internal_data(int index) const;
  ::Serialize::RouteInternalData* _internal_add_data();
  public:
  const ::Serialize::RouteInternalData& data(int index) const;
  ::Serialize::RouteInternalData* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialize::RouteInternalData >&
      data() const;

  // @@protoc_insertion_point(class_scope:Serialize.RoutesInternalData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialize::RouteInternalData > data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalog_2eproto;
};
// -------------------------------------------------------------------

class Router PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Serialize.Router) */ {
 public:
  inline Router() : Router(nullptr) {}
  virtual ~Router();

  Router(const Router& from);
  Router(Router&& from) noexcept
    : Router() {
    *this = ::std::move(from);
  }

  inline Router& operator=(const Router& from) {
    CopyFrom(from);
    return *this;
  }
  inline Router& operator=(Router&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Router& default_instance();

  static inline const Router* internal_default_instance() {
    return reinterpret_cast<const Router*>(
               &_Router_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Router& a, Router& b) {
    a.Swap(&b);
  }
  inline void Swap(Router* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Router* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Router* New() const final {
    return CreateMaybeMessage<Router>(nullptr);
  }

  Router* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Router>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Router& from);
  void MergeFrom(const Router& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Router* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Serialize.Router";
  }
  protected:
  explicit Router(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5fcatalog_2eproto);
    return ::descriptor_table_transport_5fcatalog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoutesInternalDataFieldNumber = 1,
  };
  // repeated .Serialize.RoutesInternalData routes_internal_data_ = 1;
  int routes_internal_data__size() const;
  private:
  int _internal_routes_internal_data__size() const;
  public:
  void clear_routes_internal_data_();
  ::Serialize::RoutesInternalData* mutable_routes_internal_data_(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialize::RoutesInternalData >*
      mutable_routes_internal_data_();
  private:
  const ::Serialize::RoutesInternalData& _internal_routes_internal_data_(int index) const;
  ::Serialize::RoutesInternalData* _internal_add_routes_internal_data_();
  public:
  const ::Serialize::RoutesInternalData& routes_internal_data_(int index) const;
  ::Serialize::RoutesInternalData* add_routes_internal_data_();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialize::RoutesInternalData >&
      routes_internal_data_() const;

  // @@protoc_insertion_point(class_scope:Serialize.Router)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialize::RoutesInternalData > routes_internal_data__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalog_2eproto;
};
// -------------------------------------------------------------------

class StopVertexIdx PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Serialize.StopVertexIdx) */ {
 public:
  inline StopVertexIdx() : StopVertexIdx(nullptr) {}
  virtual ~StopVertexIdx();

  StopVertexIdx(const StopVertexIdx& from);
  StopVertexIdx(StopVertexIdx&& from) noexcept
    : StopVertexIdx() {
    *this = ::std::move(from);
  }

  inline StopVertexIdx& operator=(const StopVertexIdx& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopVertexIdx& operator=(StopVertexIdx&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopVertexIdx& default_instance();

  static inline const StopVertexIdx* internal_default_instance() {
    return reinterpret_cast<const StopVertexIdx*>(
               &_StopVertexIdx_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(StopVertexIdx& a, StopVertexIdx& b) {
    a.Swap(&b);
  }
  inline void Swap(StopVertexIdx* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopVertexIdx* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopVertexIdx* New() const final {
    return CreateMaybeMessage<StopVertexIdx>(nullptr);
  }

  StopVertexIdx* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopVertexIdx>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopVertexIdx& from);
  void MergeFrom(const StopVertexIdx& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopVertexIdx* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Serialize.StopVertexIdx";
  }
  protected:
  explicit StopVertexIdx(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5fcatalog_2eproto);
    return ::descriptor_table_transport_5fcatalog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kInFieldNumber = 2,
    kOutFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 in = 2;
  void clear_in();
  ::PROTOBUF_NAMESPACE_ID::uint32 in() const;
  void set_in(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_in() const;
  void _internal_set_in(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 out = 3;
  void clear_out();
  ::PROTOBUF_NAMESPACE_ID::uint32 out() const;
  void set_out(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_out() const;
  void _internal_set_out(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Serialize.StopVertexIdx)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 in_;
  ::PROTOBUF_NAMESPACE_ID::uint32 out_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalog_2eproto;
};
// -------------------------------------------------------------------

class VertexInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Serialize.VertexInfo) */ {
 public:
  inline VertexInfo() : VertexInfo(nullptr) {}
  virtual ~VertexInfo();

  VertexInfo(const VertexInfo& from);
  VertexInfo(VertexInfo&& from) noexcept
    : VertexInfo() {
    *this = ::std::move(from);
  }

  inline VertexInfo& operator=(const VertexInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline VertexInfo& operator=(VertexInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VertexInfo& default_instance();

  static inline const VertexInfo* internal_default_instance() {
    return reinterpret_cast<const VertexInfo*>(
               &_VertexInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(VertexInfo& a, VertexInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(VertexInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VertexInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VertexInfo* New() const final {
    return CreateMaybeMessage<VertexInfo>(nullptr);
  }

  VertexInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VertexInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VertexInfo& from);
  void MergeFrom(const VertexInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VertexInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Serialize.VertexInfo";
  }
  protected:
  explicit VertexInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5fcatalog_2eproto);
    return ::descriptor_table_transport_5fcatalog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStopNameFieldNumber = 1,
  };
  // string stop_name = 1;
  void clear_stop_name();
  const std::string& stop_name() const;
  void set_stop_name(const std::string& value);
  void set_stop_name(std::string&& value);
  void set_stop_name(const char* value);
  void set_stop_name(const char* value, size_t size);
  std::string* mutable_stop_name();
  std::string* release_stop_name();
  void set_allocated_stop_name(std::string* stop_name);
  private:
  const std::string& _internal_stop_name() const;
  void _internal_set_stop_name(const std::string& value);
  std::string* _internal_mutable_stop_name();
  public:

  // @@protoc_insertion_point(class_scope:Serialize.VertexInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stop_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalog_2eproto;
};
// -------------------------------------------------------------------

class BusEdgeInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Serialize.BusEdgeInfo) */ {
 public:
  inline BusEdgeInfo() : BusEdgeInfo(nullptr) {}
  virtual ~BusEdgeInfo();

  BusEdgeInfo(const BusEdgeInfo& from);
  BusEdgeInfo(BusEdgeInfo&& from) noexcept
    : BusEdgeInfo() {
    *this = ::std::move(from);
  }

  inline BusEdgeInfo& operator=(const BusEdgeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline BusEdgeInfo& operator=(BusEdgeInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BusEdgeInfo& default_instance();

  static inline const BusEdgeInfo* internal_default_instance() {
    return reinterpret_cast<const BusEdgeInfo*>(
               &_BusEdgeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(BusEdgeInfo& a, BusEdgeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(BusEdgeInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BusEdgeInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BusEdgeInfo* New() const final {
    return CreateMaybeMessage<BusEdgeInfo>(nullptr);
  }

  BusEdgeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BusEdgeInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BusEdgeInfo& from);
  void MergeFrom(const BusEdgeInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BusEdgeInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Serialize.BusEdgeInfo";
  }
  protected:
  explicit BusEdgeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5fcatalog_2eproto);
    return ::descriptor_table_transport_5fcatalog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBusNameFieldNumber = 1,
    kStartStopIdxFieldNumber = 2,
    kFinishStopIdxFieldNumber = 3,
    kSpanCountFieldNumber = 4,
  };
  // string bus_name = 1;
  void clear_bus_name();
  const std::string& bus_name() const;
  void set_bus_name(const std::string& value);
  void set_bus_name(std::string&& value);
  void set_bus_name(const char* value);
  void set_bus_name(const char* value, size_t size);
  std::string* mutable_bus_name();
  std::string* release_bus_name();
  void set_allocated_bus_name(std::string* bus_name);
  private:
  const std::string& _internal_bus_name() const;
  void _internal_set_bus_name(const std::string& value);
  std::string* _internal_mutable_bus_name();
  public:

  // uint32 start_stop_idx = 2;
  void clear_start_stop_idx();
  ::PROTOBUF_NAMESPACE_ID::uint32 start_stop_idx() const;
  void set_start_stop_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_start_stop_idx() const;
  void _internal_set_start_stop_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 finish_stop_idx = 3;
  void clear_finish_stop_idx();
  ::PROTOBUF_NAMESPACE_ID::uint32 finish_stop_idx() const;
  void set_finish_stop_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_finish_stop_idx() const;
  void _internal_set_finish_stop_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 span_count = 4;
  void clear_span_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 span_count() const;
  void set_span_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_span_count() const;
  void _internal_set_span_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Serialize.BusEdgeInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bus_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 start_stop_idx_;
  ::PROTOBUF_NAMESPACE_ID::uint32 finish_stop_idx_;
  ::PROTOBUF_NAMESPACE_ID::uint32 span_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalog_2eproto;
};
// -------------------------------------------------------------------

class WaitEdgeInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Serialize.WaitEdgeInfo) */ {
 public:
  inline WaitEdgeInfo() : WaitEdgeInfo(nullptr) {}
  virtual ~WaitEdgeInfo();

  WaitEdgeInfo(const WaitEdgeInfo& from);
  WaitEdgeInfo(WaitEdgeInfo&& from) noexcept
    : WaitEdgeInfo() {
    *this = ::std::move(from);
  }

  inline WaitEdgeInfo& operator=(const WaitEdgeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline WaitEdgeInfo& operator=(WaitEdgeInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WaitEdgeInfo& default_instance();

  static inline const WaitEdgeInfo* internal_default_instance() {
    return reinterpret_cast<const WaitEdgeInfo*>(
               &_WaitEdgeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(WaitEdgeInfo& a, WaitEdgeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(WaitEdgeInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WaitEdgeInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WaitEdgeInfo* New() const final {
    return CreateMaybeMessage<WaitEdgeInfo>(nullptr);
  }

  WaitEdgeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WaitEdgeInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WaitEdgeInfo& from);
  void MergeFrom(const WaitEdgeInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WaitEdgeInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Serialize.WaitEdgeInfo";
  }
  protected:
  explicit WaitEdgeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5fcatalog_2eproto);
    return ::descriptor_table_transport_5fcatalog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Serialize.WaitEdgeInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalog_2eproto;
};
// -------------------------------------------------------------------

class EdgeInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Serialize.EdgeInfo) */ {
 public:
  inline EdgeInfo() : EdgeInfo(nullptr) {}
  virtual ~EdgeInfo();

  EdgeInfo(const EdgeInfo& from);
  EdgeInfo(EdgeInfo&& from) noexcept
    : EdgeInfo() {
    *this = ::std::move(from);
  }

  inline EdgeInfo& operator=(const EdgeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline EdgeInfo& operator=(EdgeInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EdgeInfo& default_instance();

  enum VariantCase {
    kBus = 1,
    kWait = 2,
    VARIANT_NOT_SET = 0,
  };

  static inline const EdgeInfo* internal_default_instance() {
    return reinterpret_cast<const EdgeInfo*>(
               &_EdgeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(EdgeInfo& a, EdgeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(EdgeInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EdgeInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EdgeInfo* New() const final {
    return CreateMaybeMessage<EdgeInfo>(nullptr);
  }

  EdgeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EdgeInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EdgeInfo& from);
  void MergeFrom(const EdgeInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EdgeInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Serialize.EdgeInfo";
  }
  protected:
  explicit EdgeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5fcatalog_2eproto);
    return ::descriptor_table_transport_5fcatalog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBusFieldNumber = 1,
    kWaitFieldNumber = 2,
  };
  // .Serialize.BusEdgeInfo bus = 1;
  bool has_bus() const;
  private:
  bool _internal_has_bus() const;
  public:
  void clear_bus();
  const ::Serialize::BusEdgeInfo& bus() const;
  ::Serialize::BusEdgeInfo* release_bus();
  ::Serialize::BusEdgeInfo* mutable_bus();
  void set_allocated_bus(::Serialize::BusEdgeInfo* bus);
  private:
  const ::Serialize::BusEdgeInfo& _internal_bus() const;
  ::Serialize::BusEdgeInfo* _internal_mutable_bus();
  public:
  void unsafe_arena_set_allocated_bus(
      ::Serialize::BusEdgeInfo* bus);
  ::Serialize::BusEdgeInfo* unsafe_arena_release_bus();

  // .Serialize.WaitEdgeInfo wait = 2;
  bool has_wait() const;
  private:
  bool _internal_has_wait() const;
  public:
  void clear_wait();
  const ::Serialize::WaitEdgeInfo& wait() const;
  ::Serialize::WaitEdgeInfo* release_wait();
  ::Serialize::WaitEdgeInfo* mutable_wait();
  void set_allocated_wait(::Serialize::WaitEdgeInfo* wait);
  private:
  const ::Serialize::WaitEdgeInfo& _internal_wait() const;
  ::Serialize::WaitEdgeInfo* _internal_mutable_wait();
  public:
  void unsafe_arena_set_allocated_wait(
      ::Serialize::WaitEdgeInfo* wait);
  ::Serialize::WaitEdgeInfo* unsafe_arena_release_wait();

  void clear_variant();
  VariantCase variant_case() const;
  // @@protoc_insertion_point(class_scope:Serialize.EdgeInfo)
 private:
  class _Internal;
  void set_has_bus();
  void set_has_wait();

  inline bool has_variant() const;
  inline void clear_has_variant();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union VariantUnion {
    VariantUnion() {}
    ::Serialize::BusEdgeInfo* bus_;
    ::Serialize::WaitEdgeInfo* wait_;
  } variant_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_transport_5fcatalog_2eproto;
};
// -------------------------------------------------------------------

class RoutingSettings PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Serialize.RoutingSettings) */ {
 public:
  inline RoutingSettings() : RoutingSettings(nullptr) {}
  virtual ~RoutingSettings();

  RoutingSettings(const RoutingSettings& from);
  RoutingSettings(RoutingSettings&& from) noexcept
    : RoutingSettings() {
    *this = ::std::move(from);
  }

  inline RoutingSettings& operator=(const RoutingSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoutingSettings& operator=(RoutingSettings&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoutingSettings& default_instance();

  static inline const RoutingSettings* internal_default_instance() {
    return reinterpret_cast<const RoutingSettings*>(
               &_RoutingSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(RoutingSettings& a, RoutingSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(RoutingSettings* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoutingSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoutingSettings* New() const final {
    return CreateMaybeMessage<RoutingSettings>(nullptr);
  }

  RoutingSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoutingSettings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoutingSettings& from);
  void MergeFrom(const RoutingSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoutingSettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Serialize.RoutingSettings";
  }
  protected:
  explicit RoutingSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5fcatalog_2eproto);
    return ::descriptor_table_transport_5fcatalog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBusWaitTimeFieldNumber = 1,
    kBusVelocityFieldNumber = 2,
  };
  // int32 bus_wait_time = 1;
  void clear_bus_wait_time();
  ::PROTOBUF_NAMESPACE_ID::int32 bus_wait_time() const;
  void set_bus_wait_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bus_wait_time() const;
  void _internal_set_bus_wait_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float bus_velocity = 2;
  void clear_bus_velocity();
  float bus_velocity() const;
  void set_bus_velocity(float value);
  private:
  float _internal_bus_velocity() const;
  void _internal_set_bus_velocity(float value);
  public:

  // @@protoc_insertion_point(class_scope:Serialize.RoutingSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 bus_wait_time_;
  float bus_velocity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalog_2eproto;
};
// -------------------------------------------------------------------

class TransportRouter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Serialize.TransportRouter) */ {
 public:
  inline TransportRouter() : TransportRouter(nullptr) {}
  virtual ~TransportRouter();

  TransportRouter(const TransportRouter& from);
  TransportRouter(TransportRouter&& from) noexcept
    : TransportRouter() {
    *this = ::std::move(from);
  }

  inline TransportRouter& operator=(const TransportRouter& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransportRouter& operator=(TransportRouter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransportRouter& default_instance();

  static inline const TransportRouter* internal_default_instance() {
    return reinterpret_cast<const TransportRouter*>(
               &_TransportRouter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(TransportRouter& a, TransportRouter& b) {
    a.Swap(&b);
  }
  inline void Swap(TransportRouter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransportRouter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransportRouter* New() const final {
    return CreateMaybeMessage<TransportRouter>(nullptr);
  }

  TransportRouter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransportRouter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransportRouter& from);
  void MergeFrom(const TransportRouter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransportRouter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Serialize.TransportRouter";
  }
  protected:
  explicit TransportRouter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5fcatalog_2eproto);
    return ::descriptor_table_transport_5fcatalog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStopsVertexIdsFieldNumber = 4,
    kVerticesInfoFieldNumber = 5,
    kEdgesInfoFieldNumber = 6,
    kSettingsFieldNumber = 1,
    kGraphFieldNumber = 2,
    kRouterFieldNumber = 3,
  };
  // repeated .Serialize.StopVertexIdx stops_vertex_ids_ = 4;
  int stops_vertex_ids__size() const;
  private:
  int _internal_stops_vertex_ids__size() const;
  public:
  void clear_stops_vertex_ids_();
  ::Serialize::StopVertexIdx* mutable_stops_vertex_ids_(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialize::StopVertexIdx >*
      mutable_stops_vertex_ids_();
  private:
  const ::Serialize::StopVertexIdx& _internal_stops_vertex_ids_(int index) const;
  ::Serialize::StopVertexIdx* _internal_add_stops_vertex_ids_();
  public:
  const ::Serialize::StopVertexIdx& stops_vertex_ids_(int index) const;
  ::Serialize::StopVertexIdx* add_stops_vertex_ids_();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialize::StopVertexIdx >&
      stops_vertex_ids_() const;

  // repeated .Serialize.VertexInfo vertices_info_ = 5;
  int vertices_info__size() const;
  private:
  int _internal_vertices_info__size() const;
  public:
  void clear_vertices_info_();
  ::Serialize::VertexInfo* mutable_vertices_info_(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialize::VertexInfo >*
      mutable_vertices_info_();
  private:
  const ::Serialize::VertexInfo& _internal_vertices_info_(int index) const;
  ::Serialize::VertexInfo* _internal_add_vertices_info_();
  public:
  const ::Serialize::VertexInfo& vertices_info_(int index) const;
  ::Serialize::VertexInfo* add_vertices_info_();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialize::VertexInfo >&
      vertices_info_() const;

  // repeated .Serialize.EdgeInfo edges_info_ = 6;
  int edges_info__size() const;
  private:
  int _internal_edges_info__size() const;
  public:
  void clear_edges_info_();
  ::Serialize::EdgeInfo* mutable_edges_info_(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialize::EdgeInfo >*
      mutable_edges_info_();
  private:
  const ::Serialize::EdgeInfo& _internal_edges_info_(int index) const;
  ::Serialize::EdgeInfo* _internal_add_edges_info_();
  public:
  const ::Serialize::EdgeInfo& edges_info_(int index) const;
  ::Serialize::EdgeInfo* add_edges_info_();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialize::EdgeInfo >&
      edges_info_() const;

  // .Serialize.RoutingSettings settings_ = 1;
  bool has_settings_() const;
  private:
  bool _internal_has_settings_() const;
  public:
  void clear_settings_();
  const ::Serialize::RoutingSettings& settings_() const;
  ::Serialize::RoutingSettings* release_settings_();
  ::Serialize::RoutingSettings* mutable_settings_();
  void set_allocated_settings_(::Serialize::RoutingSettings* settings_);
  private:
  const ::Serialize::RoutingSettings& _internal_settings_() const;
  ::Serialize::RoutingSettings* _internal_mutable_settings_();
  public:
  void unsafe_arena_set_allocated_settings_(
      ::Serialize::RoutingSettings* settings_);
  ::Serialize::RoutingSettings* unsafe_arena_release_settings_();

  // .Serialize.BusGraph graph_ = 2;
  bool has_graph_() const;
  private:
  bool _internal_has_graph_() const;
  public:
  void clear_graph_();
  const ::Serialize::BusGraph& graph_() const;
  ::Serialize::BusGraph* release_graph_();
  ::Serialize::BusGraph* mutable_graph_();
  void set_allocated_graph_(::Serialize::BusGraph* graph_);
  private:
  const ::Serialize::BusGraph& _internal_graph_() const;
  ::Serialize::BusGraph* _internal_mutable_graph_();
  public:
  void unsafe_arena_set_allocated_graph_(
      ::Serialize::BusGraph* graph_);
  ::Serialize::BusGraph* unsafe_arena_release_graph_();

  // .Serialize.Router router_ = 3;
  bool has_router_() const;
  private:
  bool _internal_has_router_() const;
  public:
  void clear_router_();
  const ::Serialize::Router& router_() const;
  ::Serialize::Router* release_router_();
  ::Serialize::Router* mutable_router_();
  void set_allocated_router_(::Serialize::Router* router_);
  private:
  const ::Serialize::Router& _internal_router_() const;
  ::Serialize::Router* _internal_mutable_router_();
  public:
  void unsafe_arena_set_allocated_router_(
      ::Serialize::Router* router_);
  ::Serialize::Router* unsafe_arena_release_router_();

  // @@protoc_insertion_point(class_scope:Serialize.TransportRouter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialize::StopVertexIdx > stops_vertex_ids__;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialize::VertexInfo > vertices_info__;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialize::EdgeInfo > edges_info__;
  ::Serialize::RoutingSettings* settings__;
  ::Serialize::BusGraph* graph__;
  ::Serialize::Router* router__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalog_2eproto;
};
// -------------------------------------------------------------------

class TransportCatalog PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Serialize.TransportCatalog) */ {
 public:
  inline TransportCatalog() : TransportCatalog(nullptr) {}
  virtual ~TransportCatalog();

  TransportCatalog(const TransportCatalog& from);
  TransportCatalog(TransportCatalog&& from) noexcept
    : TransportCatalog() {
    *this = ::std::move(from);
  }

  inline TransportCatalog& operator=(const TransportCatalog& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransportCatalog& operator=(TransportCatalog&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransportCatalog& default_instance();

  static inline const TransportCatalog* internal_default_instance() {
    return reinterpret_cast<const TransportCatalog*>(
               &_TransportCatalog_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(TransportCatalog& a, TransportCatalog& b) {
    a.Swap(&b);
  }
  inline void Swap(TransportCatalog* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransportCatalog* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransportCatalog* New() const final {
    return CreateMaybeMessage<TransportCatalog>(nullptr);
  }

  TransportCatalog* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransportCatalog>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransportCatalog& from);
  void MergeFrom(const TransportCatalog& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransportCatalog* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Serialize.TransportCatalog";
  }
  protected:
  explicit TransportCatalog(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transport_5fcatalog_2eproto);
    return ::descriptor_table_transport_5fcatalog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStopsFieldNumber = 1,
    kBusesFieldNumber = 2,
    kRouterFieldNumber = 3,
  };
  // repeated .Serialize.StopRequest stops_ = 1;
  int stops__size() const;
  private:
  int _internal_stops__size() const;
  public:
  void clear_stops_();
  ::Serialize::StopRequest* mutable_stops_(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialize::StopRequest >*
      mutable_stops_();
  private:
  const ::Serialize::StopRequest& _internal_stops_(int index) const;
  ::Serialize::StopRequest* _internal_add_stops_();
  public:
  const ::Serialize::StopRequest& stops_(int index) const;
  ::Serialize::StopRequest* add_stops_();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialize::StopRequest >&
      stops_() const;

  // repeated .Serialize.BusRequest buses_ = 2;
  int buses__size() const;
  private:
  int _internal_buses__size() const;
  public:
  void clear_buses_();
  ::Serialize::BusRequest* mutable_buses_(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialize::BusRequest >*
      mutable_buses_();
  private:
  const ::Serialize::BusRequest& _internal_buses_(int index) const;
  ::Serialize::BusRequest* _internal_add_buses_();
  public:
  const ::Serialize::BusRequest& buses_(int index) const;
  ::Serialize::BusRequest* add_buses_();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialize::BusRequest >&
      buses_() const;

  // .Serialize.TransportRouter router_ = 3;
  bool has_router_() const;
  private:
  bool _internal_has_router_() const;
  public:
  void clear_router_();
  const ::Serialize::TransportRouter& router_() const;
  ::Serialize::TransportRouter* release_router_();
  ::Serialize::TransportRouter* mutable_router_();
  void set_allocated_router_(::Serialize::TransportRouter* router_);
  private:
  const ::Serialize::TransportRouter& _internal_router_() const;
  ::Serialize::TransportRouter* _internal_mutable_router_();
  public:
  void unsafe_arena_set_allocated_router_(
      ::Serialize::TransportRouter* router_);
  ::Serialize::TransportRouter* unsafe_arena_release_router_();

  // @@protoc_insertion_point(class_scope:Serialize.TransportCatalog)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialize::StopRequest > stops__;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialize::BusRequest > buses__;
  ::Serialize::TransportRouter* router__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalog_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StopRequest

// string stop = 1;
inline void StopRequest::clear_stop() {
  stop_.ClearToEmpty();
}
inline const std::string& StopRequest::stop() const {
  // @@protoc_insertion_point(field_get:Serialize.StopRequest.stop)
  return _internal_stop();
}
inline void StopRequest::set_stop(const std::string& value) {
  _internal_set_stop(value);
  // @@protoc_insertion_point(field_set:Serialize.StopRequest.stop)
}
inline std::string* StopRequest::mutable_stop() {
  // @@protoc_insertion_point(field_mutable:Serialize.StopRequest.stop)
  return _internal_mutable_stop();
}
inline const std::string& StopRequest::_internal_stop() const {
  return stop_.Get();
}
inline void StopRequest::_internal_set_stop(const std::string& value) {
  
  stop_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StopRequest::set_stop(std::string&& value) {
  
  stop_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Serialize.StopRequest.stop)
}
inline void StopRequest::set_stop(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stop_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Serialize.StopRequest.stop)
}
inline void StopRequest::set_stop(const char* value,
    size_t size) {
  
  stop_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Serialize.StopRequest.stop)
}
inline std::string* StopRequest::_internal_mutable_stop() {
  
  return stop_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StopRequest::release_stop() {
  // @@protoc_insertion_point(field_release:Serialize.StopRequest.stop)
  return stop_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StopRequest::set_allocated_stop(std::string* stop) {
  if (stop != nullptr) {
    
  } else {
    
  }
  stop_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stop,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Serialize.StopRequest.stop)
}

// repeated string buses = 2;
inline int StopRequest::_internal_buses_size() const {
  return buses_.size();
}
inline int StopRequest::buses_size() const {
  return _internal_buses_size();
}
inline void StopRequest::clear_buses() {
  buses_.Clear();
}
inline std::string* StopRequest::add_buses() {
  // @@protoc_insertion_point(field_add_mutable:Serialize.StopRequest.buses)
  return _internal_add_buses();
}
inline const std::string& StopRequest::_internal_buses(int index) const {
  return buses_.Get(index);
}
inline const std::string& StopRequest::buses(int index) const {
  // @@protoc_insertion_point(field_get:Serialize.StopRequest.buses)
  return _internal_buses(index);
}
inline std::string* StopRequest::mutable_buses(int index) {
  // @@protoc_insertion_point(field_mutable:Serialize.StopRequest.buses)
  return buses_.Mutable(index);
}
inline void StopRequest::set_buses(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Serialize.StopRequest.buses)
  buses_.Mutable(index)->assign(value);
}
inline void StopRequest::set_buses(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Serialize.StopRequest.buses)
  buses_.Mutable(index)->assign(std::move(value));
}
inline void StopRequest::set_buses(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  buses_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Serialize.StopRequest.buses)
}
inline void StopRequest::set_buses(int index, const char* value, size_t size) {
  buses_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Serialize.StopRequest.buses)
}
inline std::string* StopRequest::_internal_add_buses() {
  return buses_.Add();
}
inline void StopRequest::add_buses(const std::string& value) {
  buses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Serialize.StopRequest.buses)
}
inline void StopRequest::add_buses(std::string&& value) {
  buses_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Serialize.StopRequest.buses)
}
inline void StopRequest::add_buses(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  buses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Serialize.StopRequest.buses)
}
inline void StopRequest::add_buses(const char* value, size_t size) {
  buses_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Serialize.StopRequest.buses)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StopRequest::buses() const {
  // @@protoc_insertion_point(field_list:Serialize.StopRequest.buses)
  return buses_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StopRequest::mutable_buses() {
  // @@protoc_insertion_point(field_mutable_list:Serialize.StopRequest.buses)
  return &buses_;
}

// -------------------------------------------------------------------

// BusRequest

// string bus = 1;
inline void BusRequest::clear_bus() {
  bus_.ClearToEmpty();
}
inline const std::string& BusRequest::bus() const {
  // @@protoc_insertion_point(field_get:Serialize.BusRequest.bus)
  return _internal_bus();
}
inline void BusRequest::set_bus(const std::string& value) {
  _internal_set_bus(value);
  // @@protoc_insertion_point(field_set:Serialize.BusRequest.bus)
}
inline std::string* BusRequest::mutable_bus() {
  // @@protoc_insertion_point(field_mutable:Serialize.BusRequest.bus)
  return _internal_mutable_bus();
}
inline const std::string& BusRequest::_internal_bus() const {
  return bus_.Get();
}
inline void BusRequest::_internal_set_bus(const std::string& value) {
  
  bus_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BusRequest::set_bus(std::string&& value) {
  
  bus_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Serialize.BusRequest.bus)
}
inline void BusRequest::set_bus(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bus_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Serialize.BusRequest.bus)
}
inline void BusRequest::set_bus(const char* value,
    size_t size) {
  
  bus_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Serialize.BusRequest.bus)
}
inline std::string* BusRequest::_internal_mutable_bus() {
  
  return bus_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BusRequest::release_bus() {
  // @@protoc_insertion_point(field_release:Serialize.BusRequest.bus)
  return bus_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BusRequest::set_allocated_bus(std::string* bus) {
  if (bus != nullptr) {
    
  } else {
    
  }
  bus_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bus,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Serialize.BusRequest.bus)
}

// uint32 stop_count = 2;
inline void BusRequest::clear_stop_count() {
  stop_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BusRequest::_internal_stop_count() const {
  return stop_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BusRequest::stop_count() const {
  // @@protoc_insertion_point(field_get:Serialize.BusRequest.stop_count)
  return _internal_stop_count();
}
inline void BusRequest::_internal_set_stop_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  stop_count_ = value;
}
inline void BusRequest::set_stop_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_stop_count(value);
  // @@protoc_insertion_point(field_set:Serialize.BusRequest.stop_count)
}

// uint32 unique_stop_count = 3;
inline void BusRequest::clear_unique_stop_count() {
  unique_stop_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BusRequest::_internal_unique_stop_count() const {
  return unique_stop_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BusRequest::unique_stop_count() const {
  // @@protoc_insertion_point(field_get:Serialize.BusRequest.unique_stop_count)
  return _internal_unique_stop_count();
}
inline void BusRequest::_internal_set_unique_stop_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  unique_stop_count_ = value;
}
inline void BusRequest::set_unique_stop_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_unique_stop_count(value);
  // @@protoc_insertion_point(field_set:Serialize.BusRequest.unique_stop_count)
}

// uint32 road_length = 4;
inline void BusRequest::clear_road_length() {
  road_length_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BusRequest::_internal_road_length() const {
  return road_length_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BusRequest::road_length() const {
  // @@protoc_insertion_point(field_get:Serialize.BusRequest.road_length)
  return _internal_road_length();
}
inline void BusRequest::_internal_set_road_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  road_length_ = value;
}
inline void BusRequest::set_road_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_road_length(value);
  // @@protoc_insertion_point(field_set:Serialize.BusRequest.road_length)
}

// float geo_road_length = 5;
inline void BusRequest::clear_geo_road_length() {
  geo_road_length_ = 0;
}
inline float BusRequest::_internal_geo_road_length() const {
  return geo_road_length_;
}
inline float BusRequest::geo_road_length() const {
  // @@protoc_insertion_point(field_get:Serialize.BusRequest.geo_road_length)
  return _internal_geo_road_length();
}
inline void BusRequest::_internal_set_geo_road_length(float value) {
  
  geo_road_length_ = value;
}
inline void BusRequest::set_geo_road_length(float value) {
  _internal_set_geo_road_length(value);
  // @@protoc_insertion_point(field_set:Serialize.BusRequest.geo_road_length)
}

// -------------------------------------------------------------------

// Edge

// uint32 from = 1;
inline void Edge::clear_from() {
  from_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Edge::_internal_from() const {
  return from_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Edge::from() const {
  // @@protoc_insertion_point(field_get:Serialize.Edge.from)
  return _internal_from();
}
inline void Edge::_internal_set_from(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  from_ = value;
}
inline void Edge::set_from(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_from(value);
  // @@protoc_insertion_point(field_set:Serialize.Edge.from)
}

// uint32 to = 2;
inline void Edge::clear_to() {
  to_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Edge::_internal_to() const {
  return to_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Edge::to() const {
  // @@protoc_insertion_point(field_get:Serialize.Edge.to)
  return _internal_to();
}
inline void Edge::_internal_set_to(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  to_ = value;
}
inline void Edge::set_to(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_to(value);
  // @@protoc_insertion_point(field_set:Serialize.Edge.to)
}

// double weight = 3;
inline void Edge::clear_weight() {
  weight_ = 0;
}
inline double Edge::_internal_weight() const {
  return weight_;
}
inline double Edge::weight() const {
  // @@protoc_insertion_point(field_get:Serialize.Edge.weight)
  return _internal_weight();
}
inline void Edge::_internal_set_weight(double value) {
  
  weight_ = value;
}
inline void Edge::set_weight(double value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:Serialize.Edge.weight)
}

// -------------------------------------------------------------------

// IncidenceList

// repeated uint32 edge_ids = 1;
inline int IncidenceList::_internal_edge_ids_size() const {
  return edge_ids_.size();
}
inline int IncidenceList::edge_ids_size() const {
  return _internal_edge_ids_size();
}
inline void IncidenceList::clear_edge_ids() {
  edge_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IncidenceList::_internal_edge_ids(int index) const {
  return edge_ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IncidenceList::edge_ids(int index) const {
  // @@protoc_insertion_point(field_get:Serialize.IncidenceList.edge_ids)
  return _internal_edge_ids(index);
}
inline void IncidenceList::set_edge_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  edge_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:Serialize.IncidenceList.edge_ids)
}
inline void IncidenceList::_internal_add_edge_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  edge_ids_.Add(value);
}
inline void IncidenceList::add_edge_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_edge_ids(value);
  // @@protoc_insertion_point(field_add:Serialize.IncidenceList.edge_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
IncidenceList::_internal_edge_ids() const {
  return edge_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
IncidenceList::edge_ids() const {
  // @@protoc_insertion_point(field_list:Serialize.IncidenceList.edge_ids)
  return _internal_edge_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
IncidenceList::_internal_mutable_edge_ids() {
  return &edge_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
IncidenceList::mutable_edge_ids() {
  // @@protoc_insertion_point(field_mutable_list:Serialize.IncidenceList.edge_ids)
  return _internal_mutable_edge_ids();
}

// -------------------------------------------------------------------

// BusGraph

// repeated .Serialize.Edge edges_ = 1;
inline int BusGraph::_internal_edges__size() const {
  return edges__.size();
}
inline int BusGraph::edges__size() const {
  return _internal_edges__size();
}
inline void BusGraph::clear_edges_() {
  edges__.Clear();
}
inline ::Serialize::Edge* BusGraph::mutable_edges_(int index) {
  // @@protoc_insertion_point(field_mutable:Serialize.BusGraph.edges_)
  return edges__.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialize::Edge >*
BusGraph::mutable_edges_() {
  // @@protoc_insertion_point(field_mutable_list:Serialize.BusGraph.edges_)
  return &edges__;
}
inline const ::Serialize::Edge& BusGraph::_internal_edges_(int index) const {
  return edges__.Get(index);
}
inline const ::Serialize::Edge& BusGraph::edges_(int index) const {
  // @@protoc_insertion_point(field_get:Serialize.BusGraph.edges_)
  return _internal_edges_(index);
}
inline ::Serialize::Edge* BusGraph::_internal_add_edges_() {
  return edges__.Add();
}
inline ::Serialize::Edge* BusGraph::add_edges_() {
  // @@protoc_insertion_point(field_add:Serialize.BusGraph.edges_)
  return _internal_add_edges_();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialize::Edge >&
BusGraph::edges_() const {
  // @@protoc_insertion_point(field_list:Serialize.BusGraph.edges_)
  return edges__;
}

// repeated .Serialize.IncidenceList incidence_lists_ = 2;
inline int BusGraph::_internal_incidence_lists__size() const {
  return incidence_lists__.size();
}
inline int BusGraph::incidence_lists__size() const {
  return _internal_incidence_lists__size();
}
inline void BusGraph::clear_incidence_lists_() {
  incidence_lists__.Clear();
}
inline ::Serialize::IncidenceList* BusGraph::mutable_incidence_lists_(int index) {
  // @@protoc_insertion_point(field_mutable:Serialize.BusGraph.incidence_lists_)
  return incidence_lists__.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialize::IncidenceList >*
BusGraph::mutable_incidence_lists_() {
  // @@protoc_insertion_point(field_mutable_list:Serialize.BusGraph.incidence_lists_)
  return &incidence_lists__;
}
inline const ::Serialize::IncidenceList& BusGraph::_internal_incidence_lists_(int index) const {
  return incidence_lists__.Get(index);
}
inline const ::Serialize::IncidenceList& BusGraph::incidence_lists_(int index) const {
  // @@protoc_insertion_point(field_get:Serialize.BusGraph.incidence_lists_)
  return _internal_incidence_lists_(index);
}
inline ::Serialize::IncidenceList* BusGraph::_internal_add_incidence_lists_() {
  return incidence_lists__.Add();
}
inline ::Serialize::IncidenceList* BusGraph::add_incidence_lists_() {
  // @@protoc_insertion_point(field_add:Serialize.BusGraph.incidence_lists_)
  return _internal_add_incidence_lists_();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialize::IncidenceList >&
BusGraph::incidence_lists_() const {
  // @@protoc_insertion_point(field_list:Serialize.BusGraph.incidence_lists_)
  return incidence_lists__;
}

// -------------------------------------------------------------------

// RouteData

// double weight = 1;
inline void RouteData::clear_weight() {
  weight_ = 0;
}
inline double RouteData::_internal_weight() const {
  return weight_;
}
inline double RouteData::weight() const {
  // @@protoc_insertion_point(field_get:Serialize.RouteData.weight)
  return _internal_weight();
}
inline void RouteData::_internal_set_weight(double value) {
  
  weight_ = value;
}
inline void RouteData::set_weight(double value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:Serialize.RouteData.weight)
}

// bool has = 2;
inline void RouteData::clear_has() {
  has_ = false;
}
inline bool RouteData::_internal_has() const {
  return has_;
}
inline bool RouteData::has() const {
  // @@protoc_insertion_point(field_get:Serialize.RouteData.has)
  return _internal_has();
}
inline void RouteData::_internal_set_has(bool value) {
  
  has_ = value;
}
inline void RouteData::set_has(bool value) {
  _internal_set_has(value);
  // @@protoc_insertion_point(field_set:Serialize.RouteData.has)
}

// uint32 prev_edge = 3;
inline void RouteData::clear_prev_edge() {
  prev_edge_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RouteData::_internal_prev_edge() const {
  return prev_edge_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RouteData::prev_edge() const {
  // @@protoc_insertion_point(field_get:Serialize.RouteData.prev_edge)
  return _internal_prev_edge();
}
inline void RouteData::_internal_set_prev_edge(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  prev_edge_ = value;
}
inline void RouteData::set_prev_edge(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_prev_edge(value);
  // @@protoc_insertion_point(field_set:Serialize.RouteData.prev_edge)
}

// -------------------------------------------------------------------

// RouteInternalData

// bool has = 1;
inline void RouteInternalData::clear_has() {
  has_ = false;
}
inline bool RouteInternalData::_internal_has() const {
  return has_;
}
inline bool RouteInternalData::has() const {
  // @@protoc_insertion_point(field_get:Serialize.RouteInternalData.has)
  return _internal_has();
}
inline void RouteInternalData::_internal_set_has(bool value) {
  
  has_ = value;
}
inline void RouteInternalData::set_has(bool value) {
  _internal_set_has(value);
  // @@protoc_insertion_point(field_set:Serialize.RouteInternalData.has)
}

// .Serialize.RouteData data = 2;
inline bool RouteInternalData::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool RouteInternalData::has_data() const {
  return _internal_has_data();
}
inline void RouteInternalData::clear_data() {
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::Serialize::RouteData& RouteInternalData::_internal_data() const {
  const ::Serialize::RouteData* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::Serialize::RouteData&>(
      ::Serialize::_RouteData_default_instance_);
}
inline const ::Serialize::RouteData& RouteInternalData::data() const {
  // @@protoc_insertion_point(field_get:Serialize.RouteInternalData.data)
  return _internal_data();
}
inline void RouteInternalData::unsafe_arena_set_allocated_data(
    ::Serialize::RouteData* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Serialize.RouteInternalData.data)
}
inline ::Serialize::RouteData* RouteInternalData::release_data() {
  
  ::Serialize::RouteData* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Serialize::RouteData* RouteInternalData::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:Serialize.RouteInternalData.data)
  
  ::Serialize::RouteData* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::Serialize::RouteData* RouteInternalData::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::Serialize::RouteData>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::Serialize::RouteData* RouteInternalData::mutable_data() {
  // @@protoc_insertion_point(field_mutable:Serialize.RouteInternalData.data)
  return _internal_mutable_data();
}
inline void RouteInternalData::set_allocated_data(::Serialize::RouteData* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:Serialize.RouteInternalData.data)
}

// -------------------------------------------------------------------

// RoutesInternalData

// repeated .Serialize.RouteInternalData data = 1;
inline int RoutesInternalData::_internal_data_size() const {
  return data_.size();
}
inline int RoutesInternalData::data_size() const {
  return _internal_data_size();
}
inline void RoutesInternalData::clear_data() {
  data_.Clear();
}
inline ::Serialize::RouteInternalData* RoutesInternalData::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:Serialize.RoutesInternalData.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialize::RouteInternalData >*
RoutesInternalData::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:Serialize.RoutesInternalData.data)
  return &data_;
}
inline const ::Serialize::RouteInternalData& RoutesInternalData::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::Serialize::RouteInternalData& RoutesInternalData::data(int index) const {
  // @@protoc_insertion_point(field_get:Serialize.RoutesInternalData.data)
  return _internal_data(index);
}
inline ::Serialize::RouteInternalData* RoutesInternalData::_internal_add_data() {
  return data_.Add();
}
inline ::Serialize::RouteInternalData* RoutesInternalData::add_data() {
  // @@protoc_insertion_point(field_add:Serialize.RoutesInternalData.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialize::RouteInternalData >&
RoutesInternalData::data() const {
  // @@protoc_insertion_point(field_list:Serialize.RoutesInternalData.data)
  return data_;
}

// -------------------------------------------------------------------

// Router

// repeated .Serialize.RoutesInternalData routes_internal_data_ = 1;
inline int Router::_internal_routes_internal_data__size() const {
  return routes_internal_data__.size();
}
inline int Router::routes_internal_data__size() const {
  return _internal_routes_internal_data__size();
}
inline void Router::clear_routes_internal_data_() {
  routes_internal_data__.Clear();
}
inline ::Serialize::RoutesInternalData* Router::mutable_routes_internal_data_(int index) {
  // @@protoc_insertion_point(field_mutable:Serialize.Router.routes_internal_data_)
  return routes_internal_data__.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialize::RoutesInternalData >*
Router::mutable_routes_internal_data_() {
  // @@protoc_insertion_point(field_mutable_list:Serialize.Router.routes_internal_data_)
  return &routes_internal_data__;
}
inline const ::Serialize::RoutesInternalData& Router::_internal_routes_internal_data_(int index) const {
  return routes_internal_data__.Get(index);
}
inline const ::Serialize::RoutesInternalData& Router::routes_internal_data_(int index) const {
  // @@protoc_insertion_point(field_get:Serialize.Router.routes_internal_data_)
  return _internal_routes_internal_data_(index);
}
inline ::Serialize::RoutesInternalData* Router::_internal_add_routes_internal_data_() {
  return routes_internal_data__.Add();
}
inline ::Serialize::RoutesInternalData* Router::add_routes_internal_data_() {
  // @@protoc_insertion_point(field_add:Serialize.Router.routes_internal_data_)
  return _internal_add_routes_internal_data_();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialize::RoutesInternalData >&
Router::routes_internal_data_() const {
  // @@protoc_insertion_point(field_list:Serialize.Router.routes_internal_data_)
  return routes_internal_data__;
}

// -------------------------------------------------------------------

// StopVertexIdx

// string name = 1;
inline void StopVertexIdx::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& StopVertexIdx::name() const {
  // @@protoc_insertion_point(field_get:Serialize.StopVertexIdx.name)
  return _internal_name();
}
inline void StopVertexIdx::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Serialize.StopVertexIdx.name)
}
inline std::string* StopVertexIdx::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Serialize.StopVertexIdx.name)
  return _internal_mutable_name();
}
inline const std::string& StopVertexIdx::_internal_name() const {
  return name_.Get();
}
inline void StopVertexIdx::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StopVertexIdx::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Serialize.StopVertexIdx.name)
}
inline void StopVertexIdx::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Serialize.StopVertexIdx.name)
}
inline void StopVertexIdx::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Serialize.StopVertexIdx.name)
}
inline std::string* StopVertexIdx::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StopVertexIdx::release_name() {
  // @@protoc_insertion_point(field_release:Serialize.StopVertexIdx.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StopVertexIdx::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Serialize.StopVertexIdx.name)
}

// uint32 in = 2;
inline void StopVertexIdx::clear_in() {
  in_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StopVertexIdx::_internal_in() const {
  return in_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StopVertexIdx::in() const {
  // @@protoc_insertion_point(field_get:Serialize.StopVertexIdx.in)
  return _internal_in();
}
inline void StopVertexIdx::_internal_set_in(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  in_ = value;
}
inline void StopVertexIdx::set_in(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_in(value);
  // @@protoc_insertion_point(field_set:Serialize.StopVertexIdx.in)
}

// uint32 out = 3;
inline void StopVertexIdx::clear_out() {
  out_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StopVertexIdx::_internal_out() const {
  return out_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StopVertexIdx::out() const {
  // @@protoc_insertion_point(field_get:Serialize.StopVertexIdx.out)
  return _internal_out();
}
inline void StopVertexIdx::_internal_set_out(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  out_ = value;
}
inline void StopVertexIdx::set_out(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_out(value);
  // @@protoc_insertion_point(field_set:Serialize.StopVertexIdx.out)
}

// -------------------------------------------------------------------

// VertexInfo

// string stop_name = 1;
inline void VertexInfo::clear_stop_name() {
  stop_name_.ClearToEmpty();
}
inline const std::string& VertexInfo::stop_name() const {
  // @@protoc_insertion_point(field_get:Serialize.VertexInfo.stop_name)
  return _internal_stop_name();
}
inline void VertexInfo::set_stop_name(const std::string& value) {
  _internal_set_stop_name(value);
  // @@protoc_insertion_point(field_set:Serialize.VertexInfo.stop_name)
}
inline std::string* VertexInfo::mutable_stop_name() {
  // @@protoc_insertion_point(field_mutable:Serialize.VertexInfo.stop_name)
  return _internal_mutable_stop_name();
}
inline const std::string& VertexInfo::_internal_stop_name() const {
  return stop_name_.Get();
}
inline void VertexInfo::_internal_set_stop_name(const std::string& value) {
  
  stop_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void VertexInfo::set_stop_name(std::string&& value) {
  
  stop_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Serialize.VertexInfo.stop_name)
}
inline void VertexInfo::set_stop_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stop_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Serialize.VertexInfo.stop_name)
}
inline void VertexInfo::set_stop_name(const char* value,
    size_t size) {
  
  stop_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Serialize.VertexInfo.stop_name)
}
inline std::string* VertexInfo::_internal_mutable_stop_name() {
  
  return stop_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* VertexInfo::release_stop_name() {
  // @@protoc_insertion_point(field_release:Serialize.VertexInfo.stop_name)
  return stop_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VertexInfo::set_allocated_stop_name(std::string* stop_name) {
  if (stop_name != nullptr) {
    
  } else {
    
  }
  stop_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stop_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Serialize.VertexInfo.stop_name)
}

// -------------------------------------------------------------------

// BusEdgeInfo

// string bus_name = 1;
inline void BusEdgeInfo::clear_bus_name() {
  bus_name_.ClearToEmpty();
}
inline const std::string& BusEdgeInfo::bus_name() const {
  // @@protoc_insertion_point(field_get:Serialize.BusEdgeInfo.bus_name)
  return _internal_bus_name();
}
inline void BusEdgeInfo::set_bus_name(const std::string& value) {
  _internal_set_bus_name(value);
  // @@protoc_insertion_point(field_set:Serialize.BusEdgeInfo.bus_name)
}
inline std::string* BusEdgeInfo::mutable_bus_name() {
  // @@protoc_insertion_point(field_mutable:Serialize.BusEdgeInfo.bus_name)
  return _internal_mutable_bus_name();
}
inline const std::string& BusEdgeInfo::_internal_bus_name() const {
  return bus_name_.Get();
}
inline void BusEdgeInfo::_internal_set_bus_name(const std::string& value) {
  
  bus_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BusEdgeInfo::set_bus_name(std::string&& value) {
  
  bus_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Serialize.BusEdgeInfo.bus_name)
}
inline void BusEdgeInfo::set_bus_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bus_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Serialize.BusEdgeInfo.bus_name)
}
inline void BusEdgeInfo::set_bus_name(const char* value,
    size_t size) {
  
  bus_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Serialize.BusEdgeInfo.bus_name)
}
inline std::string* BusEdgeInfo::_internal_mutable_bus_name() {
  
  return bus_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BusEdgeInfo::release_bus_name() {
  // @@protoc_insertion_point(field_release:Serialize.BusEdgeInfo.bus_name)
  return bus_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BusEdgeInfo::set_allocated_bus_name(std::string* bus_name) {
  if (bus_name != nullptr) {
    
  } else {
    
  }
  bus_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bus_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Serialize.BusEdgeInfo.bus_name)
}

// uint32 start_stop_idx = 2;
inline void BusEdgeInfo::clear_start_stop_idx() {
  start_stop_idx_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BusEdgeInfo::_internal_start_stop_idx() const {
  return start_stop_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BusEdgeInfo::start_stop_idx() const {
  // @@protoc_insertion_point(field_get:Serialize.BusEdgeInfo.start_stop_idx)
  return _internal_start_stop_idx();
}
inline void BusEdgeInfo::_internal_set_start_stop_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  start_stop_idx_ = value;
}
inline void BusEdgeInfo::set_start_stop_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_start_stop_idx(value);
  // @@protoc_insertion_point(field_set:Serialize.BusEdgeInfo.start_stop_idx)
}

// uint32 finish_stop_idx = 3;
inline void BusEdgeInfo::clear_finish_stop_idx() {
  finish_stop_idx_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BusEdgeInfo::_internal_finish_stop_idx() const {
  return finish_stop_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BusEdgeInfo::finish_stop_idx() const {
  // @@protoc_insertion_point(field_get:Serialize.BusEdgeInfo.finish_stop_idx)
  return _internal_finish_stop_idx();
}
inline void BusEdgeInfo::_internal_set_finish_stop_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  finish_stop_idx_ = value;
}
inline void BusEdgeInfo::set_finish_stop_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_finish_stop_idx(value);
  // @@protoc_insertion_point(field_set:Serialize.BusEdgeInfo.finish_stop_idx)
}

// uint32 span_count = 4;
inline void BusEdgeInfo::clear_span_count() {
  span_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BusEdgeInfo::_internal_span_count() const {
  return span_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BusEdgeInfo::span_count() const {
  // @@protoc_insertion_point(field_get:Serialize.BusEdgeInfo.span_count)
  return _internal_span_count();
}
inline void BusEdgeInfo::_internal_set_span_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  span_count_ = value;
}
inline void BusEdgeInfo::set_span_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_span_count(value);
  // @@protoc_insertion_point(field_set:Serialize.BusEdgeInfo.span_count)
}

// -------------------------------------------------------------------

// WaitEdgeInfo

// -------------------------------------------------------------------

// EdgeInfo

// .Serialize.BusEdgeInfo bus = 1;
inline bool EdgeInfo::_internal_has_bus() const {
  return variant_case() == kBus;
}
inline bool EdgeInfo::has_bus() const {
  return _internal_has_bus();
}
inline void EdgeInfo::set_has_bus() {
  _oneof_case_[0] = kBus;
}
inline void EdgeInfo::clear_bus() {
  if (_internal_has_bus()) {
    if (GetArena() == nullptr) {
      delete variant_.bus_;
    }
    clear_has_variant();
  }
}
inline ::Serialize::BusEdgeInfo* EdgeInfo::release_bus() {
  // @@protoc_insertion_point(field_release:Serialize.EdgeInfo.bus)
  if (_internal_has_bus()) {
    clear_has_variant();
      ::Serialize::BusEdgeInfo* temp = variant_.bus_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    variant_.bus_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Serialize::BusEdgeInfo& EdgeInfo::_internal_bus() const {
  return _internal_has_bus()
      ? *variant_.bus_
      : reinterpret_cast< ::Serialize::BusEdgeInfo&>(::Serialize::_BusEdgeInfo_default_instance_);
}
inline const ::Serialize::BusEdgeInfo& EdgeInfo::bus() const {
  // @@protoc_insertion_point(field_get:Serialize.EdgeInfo.bus)
  return _internal_bus();
}
inline ::Serialize::BusEdgeInfo* EdgeInfo::unsafe_arena_release_bus() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Serialize.EdgeInfo.bus)
  if (_internal_has_bus()) {
    clear_has_variant();
    ::Serialize::BusEdgeInfo* temp = variant_.bus_;
    variant_.bus_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EdgeInfo::unsafe_arena_set_allocated_bus(::Serialize::BusEdgeInfo* bus) {
  clear_variant();
  if (bus) {
    set_has_bus();
    variant_.bus_ = bus;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Serialize.EdgeInfo.bus)
}
inline ::Serialize::BusEdgeInfo* EdgeInfo::_internal_mutable_bus() {
  if (!_internal_has_bus()) {
    clear_variant();
    set_has_bus();
    variant_.bus_ = CreateMaybeMessage< ::Serialize::BusEdgeInfo >(GetArena());
  }
  return variant_.bus_;
}
inline ::Serialize::BusEdgeInfo* EdgeInfo::mutable_bus() {
  // @@protoc_insertion_point(field_mutable:Serialize.EdgeInfo.bus)
  return _internal_mutable_bus();
}

// .Serialize.WaitEdgeInfo wait = 2;
inline bool EdgeInfo::_internal_has_wait() const {
  return variant_case() == kWait;
}
inline bool EdgeInfo::has_wait() const {
  return _internal_has_wait();
}
inline void EdgeInfo::set_has_wait() {
  _oneof_case_[0] = kWait;
}
inline void EdgeInfo::clear_wait() {
  if (_internal_has_wait()) {
    if (GetArena() == nullptr) {
      delete variant_.wait_;
    }
    clear_has_variant();
  }
}
inline ::Serialize::WaitEdgeInfo* EdgeInfo::release_wait() {
  // @@protoc_insertion_point(field_release:Serialize.EdgeInfo.wait)
  if (_internal_has_wait()) {
    clear_has_variant();
      ::Serialize::WaitEdgeInfo* temp = variant_.wait_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    variant_.wait_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Serialize::WaitEdgeInfo& EdgeInfo::_internal_wait() const {
  return _internal_has_wait()
      ? *variant_.wait_
      : reinterpret_cast< ::Serialize::WaitEdgeInfo&>(::Serialize::_WaitEdgeInfo_default_instance_);
}
inline const ::Serialize::WaitEdgeInfo& EdgeInfo::wait() const {
  // @@protoc_insertion_point(field_get:Serialize.EdgeInfo.wait)
  return _internal_wait();
}
inline ::Serialize::WaitEdgeInfo* EdgeInfo::unsafe_arena_release_wait() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Serialize.EdgeInfo.wait)
  if (_internal_has_wait()) {
    clear_has_variant();
    ::Serialize::WaitEdgeInfo* temp = variant_.wait_;
    variant_.wait_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EdgeInfo::unsafe_arena_set_allocated_wait(::Serialize::WaitEdgeInfo* wait) {
  clear_variant();
  if (wait) {
    set_has_wait();
    variant_.wait_ = wait;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Serialize.EdgeInfo.wait)
}
inline ::Serialize::WaitEdgeInfo* EdgeInfo::_internal_mutable_wait() {
  if (!_internal_has_wait()) {
    clear_variant();
    set_has_wait();
    variant_.wait_ = CreateMaybeMessage< ::Serialize::WaitEdgeInfo >(GetArena());
  }
  return variant_.wait_;
}
inline ::Serialize::WaitEdgeInfo* EdgeInfo::mutable_wait() {
  // @@protoc_insertion_point(field_mutable:Serialize.EdgeInfo.wait)
  return _internal_mutable_wait();
}

inline bool EdgeInfo::has_variant() const {
  return variant_case() != VARIANT_NOT_SET;
}
inline void EdgeInfo::clear_has_variant() {
  _oneof_case_[0] = VARIANT_NOT_SET;
}
inline EdgeInfo::VariantCase EdgeInfo::variant_case() const {
  return EdgeInfo::VariantCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// RoutingSettings

// int32 bus_wait_time = 1;
inline void RoutingSettings::clear_bus_wait_time() {
  bus_wait_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoutingSettings::_internal_bus_wait_time() const {
  return bus_wait_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoutingSettings::bus_wait_time() const {
  // @@protoc_insertion_point(field_get:Serialize.RoutingSettings.bus_wait_time)
  return _internal_bus_wait_time();
}
inline void RoutingSettings::_internal_set_bus_wait_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bus_wait_time_ = value;
}
inline void RoutingSettings::set_bus_wait_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bus_wait_time(value);
  // @@protoc_insertion_point(field_set:Serialize.RoutingSettings.bus_wait_time)
}

// float bus_velocity = 2;
inline void RoutingSettings::clear_bus_velocity() {
  bus_velocity_ = 0;
}
inline float RoutingSettings::_internal_bus_velocity() const {
  return bus_velocity_;
}
inline float RoutingSettings::bus_velocity() const {
  // @@protoc_insertion_point(field_get:Serialize.RoutingSettings.bus_velocity)
  return _internal_bus_velocity();
}
inline void RoutingSettings::_internal_set_bus_velocity(float value) {
  
  bus_velocity_ = value;
}
inline void RoutingSettings::set_bus_velocity(float value) {
  _internal_set_bus_velocity(value);
  // @@protoc_insertion_point(field_set:Serialize.RoutingSettings.bus_velocity)
}

// -------------------------------------------------------------------

// TransportRouter

// .Serialize.RoutingSettings settings_ = 1;
inline bool TransportRouter::_internal_has_settings_() const {
  return this != internal_default_instance() && settings__ != nullptr;
}
inline bool TransportRouter::has_settings_() const {
  return _internal_has_settings_();
}
inline void TransportRouter::clear_settings_() {
  if (GetArena() == nullptr && settings__ != nullptr) {
    delete settings__;
  }
  settings__ = nullptr;
}
inline const ::Serialize::RoutingSettings& TransportRouter::_internal_settings_() const {
  const ::Serialize::RoutingSettings* p = settings__;
  return p != nullptr ? *p : reinterpret_cast<const ::Serialize::RoutingSettings&>(
      ::Serialize::_RoutingSettings_default_instance_);
}
inline const ::Serialize::RoutingSettings& TransportRouter::settings_() const {
  // @@protoc_insertion_point(field_get:Serialize.TransportRouter.settings_)
  return _internal_settings_();
}
inline void TransportRouter::unsafe_arena_set_allocated_settings_(
    ::Serialize::RoutingSettings* settings_) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(settings__);
  }
  settings__ = settings_;
  if (settings_) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Serialize.TransportRouter.settings_)
}
inline ::Serialize::RoutingSettings* TransportRouter::release_settings_() {
  
  ::Serialize::RoutingSettings* temp = settings__;
  settings__ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Serialize::RoutingSettings* TransportRouter::unsafe_arena_release_settings_() {
  // @@protoc_insertion_point(field_release:Serialize.TransportRouter.settings_)
  
  ::Serialize::RoutingSettings* temp = settings__;
  settings__ = nullptr;
  return temp;
}
inline ::Serialize::RoutingSettings* TransportRouter::_internal_mutable_settings_() {
  
  if (settings__ == nullptr) {
    auto* p = CreateMaybeMessage<::Serialize::RoutingSettings>(GetArena());
    settings__ = p;
  }
  return settings__;
}
inline ::Serialize::RoutingSettings* TransportRouter::mutable_settings_() {
  // @@protoc_insertion_point(field_mutable:Serialize.TransportRouter.settings_)
  return _internal_mutable_settings_();
}
inline void TransportRouter::set_allocated_settings_(::Serialize::RoutingSettings* settings_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete settings__;
  }
  if (settings_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(settings_);
    if (message_arena != submessage_arena) {
      settings_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, settings_, submessage_arena);
    }
    
  } else {
    
  }
  settings__ = settings_;
  // @@protoc_insertion_point(field_set_allocated:Serialize.TransportRouter.settings_)
}

// .Serialize.BusGraph graph_ = 2;
inline bool TransportRouter::_internal_has_graph_() const {
  return this != internal_default_instance() && graph__ != nullptr;
}
inline bool TransportRouter::has_graph_() const {
  return _internal_has_graph_();
}
inline void TransportRouter::clear_graph_() {
  if (GetArena() == nullptr && graph__ != nullptr) {
    delete graph__;
  }
  graph__ = nullptr;
}
inline const ::Serialize::BusGraph& TransportRouter::_internal_graph_() const {
  const ::Serialize::BusGraph* p = graph__;
  return p != nullptr ? *p : reinterpret_cast<const ::Serialize::BusGraph&>(
      ::Serialize::_BusGraph_default_instance_);
}
inline const ::Serialize::BusGraph& TransportRouter::graph_() const {
  // @@protoc_insertion_point(field_get:Serialize.TransportRouter.graph_)
  return _internal_graph_();
}
inline void TransportRouter::unsafe_arena_set_allocated_graph_(
    ::Serialize::BusGraph* graph_) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(graph__);
  }
  graph__ = graph_;
  if (graph_) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Serialize.TransportRouter.graph_)
}
inline ::Serialize::BusGraph* TransportRouter::release_graph_() {
  
  ::Serialize::BusGraph* temp = graph__;
  graph__ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Serialize::BusGraph* TransportRouter::unsafe_arena_release_graph_() {
  // @@protoc_insertion_point(field_release:Serialize.TransportRouter.graph_)
  
  ::Serialize::BusGraph* temp = graph__;
  graph__ = nullptr;
  return temp;
}
inline ::Serialize::BusGraph* TransportRouter::_internal_mutable_graph_() {
  
  if (graph__ == nullptr) {
    auto* p = CreateMaybeMessage<::Serialize::BusGraph>(GetArena());
    graph__ = p;
  }
  return graph__;
}
inline ::Serialize::BusGraph* TransportRouter::mutable_graph_() {
  // @@protoc_insertion_point(field_mutable:Serialize.TransportRouter.graph_)
  return _internal_mutable_graph_();
}
inline void TransportRouter::set_allocated_graph_(::Serialize::BusGraph* graph_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete graph__;
  }
  if (graph_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(graph_);
    if (message_arena != submessage_arena) {
      graph_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, graph_, submessage_arena);
    }
    
  } else {
    
  }
  graph__ = graph_;
  // @@protoc_insertion_point(field_set_allocated:Serialize.TransportRouter.graph_)
}

// .Serialize.Router router_ = 3;
inline bool TransportRouter::_internal_has_router_() const {
  return this != internal_default_instance() && router__ != nullptr;
}
inline bool TransportRouter::has_router_() const {
  return _internal_has_router_();
}
inline void TransportRouter::clear_router_() {
  if (GetArena() == nullptr && router__ != nullptr) {
    delete router__;
  }
  router__ = nullptr;
}
inline const ::Serialize::Router& TransportRouter::_internal_router_() const {
  const ::Serialize::Router* p = router__;
  return p != nullptr ? *p : reinterpret_cast<const ::Serialize::Router&>(
      ::Serialize::_Router_default_instance_);
}
inline const ::Serialize::Router& TransportRouter::router_() const {
  // @@protoc_insertion_point(field_get:Serialize.TransportRouter.router_)
  return _internal_router_();
}
inline void TransportRouter::unsafe_arena_set_allocated_router_(
    ::Serialize::Router* router_) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(router__);
  }
  router__ = router_;
  if (router_) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Serialize.TransportRouter.router_)
}
inline ::Serialize::Router* TransportRouter::release_router_() {
  
  ::Serialize::Router* temp = router__;
  router__ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Serialize::Router* TransportRouter::unsafe_arena_release_router_() {
  // @@protoc_insertion_point(field_release:Serialize.TransportRouter.router_)
  
  ::Serialize::Router* temp = router__;
  router__ = nullptr;
  return temp;
}
inline ::Serialize::Router* TransportRouter::_internal_mutable_router_() {
  
  if (router__ == nullptr) {
    auto* p = CreateMaybeMessage<::Serialize::Router>(GetArena());
    router__ = p;
  }
  return router__;
}
inline ::Serialize::Router* TransportRouter::mutable_router_() {
  // @@protoc_insertion_point(field_mutable:Serialize.TransportRouter.router_)
  return _internal_mutable_router_();
}
inline void TransportRouter::set_allocated_router_(::Serialize::Router* router_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete router__;
  }
  if (router_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(router_);
    if (message_arena != submessage_arena) {
      router_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, router_, submessage_arena);
    }
    
  } else {
    
  }
  router__ = router_;
  // @@protoc_insertion_point(field_set_allocated:Serialize.TransportRouter.router_)
}

// repeated .Serialize.StopVertexIdx stops_vertex_ids_ = 4;
inline int TransportRouter::_internal_stops_vertex_ids__size() const {
  return stops_vertex_ids__.size();
}
inline int TransportRouter::stops_vertex_ids__size() const {
  return _internal_stops_vertex_ids__size();
}
inline void TransportRouter::clear_stops_vertex_ids_() {
  stops_vertex_ids__.Clear();
}
inline ::Serialize::StopVertexIdx* TransportRouter::mutable_stops_vertex_ids_(int index) {
  // @@protoc_insertion_point(field_mutable:Serialize.TransportRouter.stops_vertex_ids_)
  return stops_vertex_ids__.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialize::StopVertexIdx >*
TransportRouter::mutable_stops_vertex_ids_() {
  // @@protoc_insertion_point(field_mutable_list:Serialize.TransportRouter.stops_vertex_ids_)
  return &stops_vertex_ids__;
}
inline const ::Serialize::StopVertexIdx& TransportRouter::_internal_stops_vertex_ids_(int index) const {
  return stops_vertex_ids__.Get(index);
}
inline const ::Serialize::StopVertexIdx& TransportRouter::stops_vertex_ids_(int index) const {
  // @@protoc_insertion_point(field_get:Serialize.TransportRouter.stops_vertex_ids_)
  return _internal_stops_vertex_ids_(index);
}
inline ::Serialize::StopVertexIdx* TransportRouter::_internal_add_stops_vertex_ids_() {
  return stops_vertex_ids__.Add();
}
inline ::Serialize::StopVertexIdx* TransportRouter::add_stops_vertex_ids_() {
  // @@protoc_insertion_point(field_add:Serialize.TransportRouter.stops_vertex_ids_)
  return _internal_add_stops_vertex_ids_();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialize::StopVertexIdx >&
TransportRouter::stops_vertex_ids_() const {
  // @@protoc_insertion_point(field_list:Serialize.TransportRouter.stops_vertex_ids_)
  return stops_vertex_ids__;
}

// repeated .Serialize.VertexInfo vertices_info_ = 5;
inline int TransportRouter::_internal_vertices_info__size() const {
  return vertices_info__.size();
}
inline int TransportRouter::vertices_info__size() const {
  return _internal_vertices_info__size();
}
inline void TransportRouter::clear_vertices_info_() {
  vertices_info__.Clear();
}
inline ::Serialize::VertexInfo* TransportRouter::mutable_vertices_info_(int index) {
  // @@protoc_insertion_point(field_mutable:Serialize.TransportRouter.vertices_info_)
  return vertices_info__.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialize::VertexInfo >*
TransportRouter::mutable_vertices_info_() {
  // @@protoc_insertion_point(field_mutable_list:Serialize.TransportRouter.vertices_info_)
  return &vertices_info__;
}
inline const ::Serialize::VertexInfo& TransportRouter::_internal_vertices_info_(int index) const {
  return vertices_info__.Get(index);
}
inline const ::Serialize::VertexInfo& TransportRouter::vertices_info_(int index) const {
  // @@protoc_insertion_point(field_get:Serialize.TransportRouter.vertices_info_)
  return _internal_vertices_info_(index);
}
inline ::Serialize::VertexInfo* TransportRouter::_internal_add_vertices_info_() {
  return vertices_info__.Add();
}
inline ::Serialize::VertexInfo* TransportRouter::add_vertices_info_() {
  // @@protoc_insertion_point(field_add:Serialize.TransportRouter.vertices_info_)
  return _internal_add_vertices_info_();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialize::VertexInfo >&
TransportRouter::vertices_info_() const {
  // @@protoc_insertion_point(field_list:Serialize.TransportRouter.vertices_info_)
  return vertices_info__;
}

// repeated .Serialize.EdgeInfo edges_info_ = 6;
inline int TransportRouter::_internal_edges_info__size() const {
  return edges_info__.size();
}
inline int TransportRouter::edges_info__size() const {
  return _internal_edges_info__size();
}
inline void TransportRouter::clear_edges_info_() {
  edges_info__.Clear();
}
inline ::Serialize::EdgeInfo* TransportRouter::mutable_edges_info_(int index) {
  // @@protoc_insertion_point(field_mutable:Serialize.TransportRouter.edges_info_)
  return edges_info__.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialize::EdgeInfo >*
TransportRouter::mutable_edges_info_() {
  // @@protoc_insertion_point(field_mutable_list:Serialize.TransportRouter.edges_info_)
  return &edges_info__;
}
inline const ::Serialize::EdgeInfo& TransportRouter::_internal_edges_info_(int index) const {
  return edges_info__.Get(index);
}
inline const ::Serialize::EdgeInfo& TransportRouter::edges_info_(int index) const {
  // @@protoc_insertion_point(field_get:Serialize.TransportRouter.edges_info_)
  return _internal_edges_info_(index);
}
inline ::Serialize::EdgeInfo* TransportRouter::_internal_add_edges_info_() {
  return edges_info__.Add();
}
inline ::Serialize::EdgeInfo* TransportRouter::add_edges_info_() {
  // @@protoc_insertion_point(field_add:Serialize.TransportRouter.edges_info_)
  return _internal_add_edges_info_();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialize::EdgeInfo >&
TransportRouter::edges_info_() const {
  // @@protoc_insertion_point(field_list:Serialize.TransportRouter.edges_info_)
  return edges_info__;
}

// -------------------------------------------------------------------

// TransportCatalog

// repeated .Serialize.StopRequest stops_ = 1;
inline int TransportCatalog::_internal_stops__size() const {
  return stops__.size();
}
inline int TransportCatalog::stops__size() const {
  return _internal_stops__size();
}
inline void TransportCatalog::clear_stops_() {
  stops__.Clear();
}
inline ::Serialize::StopRequest* TransportCatalog::mutable_stops_(int index) {
  // @@protoc_insertion_point(field_mutable:Serialize.TransportCatalog.stops_)
  return stops__.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialize::StopRequest >*
TransportCatalog::mutable_stops_() {
  // @@protoc_insertion_point(field_mutable_list:Serialize.TransportCatalog.stops_)
  return &stops__;
}
inline const ::Serialize::StopRequest& TransportCatalog::_internal_stops_(int index) const {
  return stops__.Get(index);
}
inline const ::Serialize::StopRequest& TransportCatalog::stops_(int index) const {
  // @@protoc_insertion_point(field_get:Serialize.TransportCatalog.stops_)
  return _internal_stops_(index);
}
inline ::Serialize::StopRequest* TransportCatalog::_internal_add_stops_() {
  return stops__.Add();
}
inline ::Serialize::StopRequest* TransportCatalog::add_stops_() {
  // @@protoc_insertion_point(field_add:Serialize.TransportCatalog.stops_)
  return _internal_add_stops_();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialize::StopRequest >&
TransportCatalog::stops_() const {
  // @@protoc_insertion_point(field_list:Serialize.TransportCatalog.stops_)
  return stops__;
}

// repeated .Serialize.BusRequest buses_ = 2;
inline int TransportCatalog::_internal_buses__size() const {
  return buses__.size();
}
inline int TransportCatalog::buses__size() const {
  return _internal_buses__size();
}
inline void TransportCatalog::clear_buses_() {
  buses__.Clear();
}
inline ::Serialize::BusRequest* TransportCatalog::mutable_buses_(int index) {
  // @@protoc_insertion_point(field_mutable:Serialize.TransportCatalog.buses_)
  return buses__.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialize::BusRequest >*
TransportCatalog::mutable_buses_() {
  // @@protoc_insertion_point(field_mutable_list:Serialize.TransportCatalog.buses_)
  return &buses__;
}
inline const ::Serialize::BusRequest& TransportCatalog::_internal_buses_(int index) const {
  return buses__.Get(index);
}
inline const ::Serialize::BusRequest& TransportCatalog::buses_(int index) const {
  // @@protoc_insertion_point(field_get:Serialize.TransportCatalog.buses_)
  return _internal_buses_(index);
}
inline ::Serialize::BusRequest* TransportCatalog::_internal_add_buses_() {
  return buses__.Add();
}
inline ::Serialize::BusRequest* TransportCatalog::add_buses_() {
  // @@protoc_insertion_point(field_add:Serialize.TransportCatalog.buses_)
  return _internal_add_buses_();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Serialize::BusRequest >&
TransportCatalog::buses_() const {
  // @@protoc_insertion_point(field_list:Serialize.TransportCatalog.buses_)
  return buses__;
}

// .Serialize.TransportRouter router_ = 3;
inline bool TransportCatalog::_internal_has_router_() const {
  return this != internal_default_instance() && router__ != nullptr;
}
inline bool TransportCatalog::has_router_() const {
  return _internal_has_router_();
}
inline void TransportCatalog::clear_router_() {
  if (GetArena() == nullptr && router__ != nullptr) {
    delete router__;
  }
  router__ = nullptr;
}
inline const ::Serialize::TransportRouter& TransportCatalog::_internal_router_() const {
  const ::Serialize::TransportRouter* p = router__;
  return p != nullptr ? *p : reinterpret_cast<const ::Serialize::TransportRouter&>(
      ::Serialize::_TransportRouter_default_instance_);
}
inline const ::Serialize::TransportRouter& TransportCatalog::router_() const {
  // @@protoc_insertion_point(field_get:Serialize.TransportCatalog.router_)
  return _internal_router_();
}
inline void TransportCatalog::unsafe_arena_set_allocated_router_(
    ::Serialize::TransportRouter* router_) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(router__);
  }
  router__ = router_;
  if (router_) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Serialize.TransportCatalog.router_)
}
inline ::Serialize::TransportRouter* TransportCatalog::release_router_() {
  
  ::Serialize::TransportRouter* temp = router__;
  router__ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Serialize::TransportRouter* TransportCatalog::unsafe_arena_release_router_() {
  // @@protoc_insertion_point(field_release:Serialize.TransportCatalog.router_)
  
  ::Serialize::TransportRouter* temp = router__;
  router__ = nullptr;
  return temp;
}
inline ::Serialize::TransportRouter* TransportCatalog::_internal_mutable_router_() {
  
  if (router__ == nullptr) {
    auto* p = CreateMaybeMessage<::Serialize::TransportRouter>(GetArena());
    router__ = p;
  }
  return router__;
}
inline ::Serialize::TransportRouter* TransportCatalog::mutable_router_() {
  // @@protoc_insertion_point(field_mutable:Serialize.TransportCatalog.router_)
  return _internal_mutable_router_();
}
inline void TransportCatalog::set_allocated_router_(::Serialize::TransportRouter* router_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete router__;
  }
  if (router_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(router_);
    if (message_arena != submessage_arena) {
      router_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, router_, submessage_arena);
    }
    
  } else {
    
  }
  router__ = router_;
  // @@protoc_insertion_point(field_set_allocated:Serialize.TransportCatalog.router_)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Serialize

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalog_2eproto
