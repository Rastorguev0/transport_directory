// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport_router.proto

#include "transport_router.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_graph_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DirectedWeightedGraph_graph_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_graph_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Router_graph_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transport_5frouter_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BusEdgeInfo_transport_5frouter_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transport_5frouter_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_EdgeInfo_transport_5frouter_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transport_5frouter_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoutingSettings_transport_5frouter_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transport_5frouter_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StopVertexIds_transport_5frouter_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transport_5frouter_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VertexInfo_transport_5frouter_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_transport_5frouter_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WaitEdgeInfo_transport_5frouter_2eproto;
namespace TCProto {
class RoutingSettingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoutingSettings> _instance;
} _RoutingSettings_default_instance_;
class StopVertexIdsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StopVertexIds> _instance;
} _StopVertexIds_default_instance_;
class VertexInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VertexInfo> _instance;
} _VertexInfo_default_instance_;
class BusEdgeInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BusEdgeInfo> _instance;
} _BusEdgeInfo_default_instance_;
class WaitEdgeInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WaitEdgeInfo> _instance;
} _WaitEdgeInfo_default_instance_;
class EdgeInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EdgeInfo> _instance;
} _EdgeInfo_default_instance_;
class TransportRouterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransportRouter> _instance;
} _TransportRouter_default_instance_;
}  // namespace TCProto
static void InitDefaultsscc_info_BusEdgeInfo_transport_5frouter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TCProto::_BusEdgeInfo_default_instance_;
    new (ptr) ::TCProto::BusEdgeInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BusEdgeInfo_transport_5frouter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BusEdgeInfo_transport_5frouter_2eproto}, {}};

static void InitDefaultsscc_info_EdgeInfo_transport_5frouter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TCProto::_EdgeInfo_default_instance_;
    new (ptr) ::TCProto::EdgeInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_EdgeInfo_transport_5frouter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_EdgeInfo_transport_5frouter_2eproto}, {
      &scc_info_BusEdgeInfo_transport_5frouter_2eproto.base,
      &scc_info_WaitEdgeInfo_transport_5frouter_2eproto.base,}};

static void InitDefaultsscc_info_RoutingSettings_transport_5frouter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TCProto::_RoutingSettings_default_instance_;
    new (ptr) ::TCProto::RoutingSettings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoutingSettings_transport_5frouter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RoutingSettings_transport_5frouter_2eproto}, {}};

static void InitDefaultsscc_info_StopVertexIds_transport_5frouter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TCProto::_StopVertexIds_default_instance_;
    new (ptr) ::TCProto::StopVertexIds();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StopVertexIds_transport_5frouter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StopVertexIds_transport_5frouter_2eproto}, {}};

static void InitDefaultsscc_info_TransportRouter_transport_5frouter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TCProto::_TransportRouter_default_instance_;
    new (ptr) ::TCProto::TransportRouter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_TransportRouter_transport_5frouter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_TransportRouter_transport_5frouter_2eproto}, {
      &scc_info_RoutingSettings_transport_5frouter_2eproto.base,
      &scc_info_DirectedWeightedGraph_graph_2eproto.base,
      &scc_info_Router_graph_2eproto.base,
      &scc_info_StopVertexIds_transport_5frouter_2eproto.base,
      &scc_info_VertexInfo_transport_5frouter_2eproto.base,
      &scc_info_EdgeInfo_transport_5frouter_2eproto.base,}};

static void InitDefaultsscc_info_VertexInfo_transport_5frouter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TCProto::_VertexInfo_default_instance_;
    new (ptr) ::TCProto::VertexInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VertexInfo_transport_5frouter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VertexInfo_transport_5frouter_2eproto}, {}};

static void InitDefaultsscc_info_WaitEdgeInfo_transport_5frouter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TCProto::_WaitEdgeInfo_default_instance_;
    new (ptr) ::TCProto::WaitEdgeInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WaitEdgeInfo_transport_5frouter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WaitEdgeInfo_transport_5frouter_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_transport_5frouter_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_transport_5frouter_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_transport_5frouter_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_transport_5frouter_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TCProto::RoutingSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TCProto::RoutingSettings, bus_wait_time_),
  PROTOBUF_FIELD_OFFSET(::TCProto::RoutingSettings, bus_velocity_),
  PROTOBUF_FIELD_OFFSET(::TCProto::RoutingSettings, pedestrian_velocity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TCProto::StopVertexIds, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TCProto::StopVertexIds, name_),
  PROTOBUF_FIELD_OFFSET(::TCProto::StopVertexIds, in_),
  PROTOBUF_FIELD_OFFSET(::TCProto::StopVertexIds, out_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TCProto::VertexInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TCProto::VertexInfo, stop_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TCProto::BusEdgeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TCProto::BusEdgeInfo, bus_name_),
  PROTOBUF_FIELD_OFFSET(::TCProto::BusEdgeInfo, start_stop_idx_),
  PROTOBUF_FIELD_OFFSET(::TCProto::BusEdgeInfo, finish_stop_idx_),
  PROTOBUF_FIELD_OFFSET(::TCProto::BusEdgeInfo, span_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TCProto::WaitEdgeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TCProto::EdgeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::TCProto::EdgeInfo, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::TCProto::EdgeInfo, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TCProto::TransportRouter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TCProto::TransportRouter, routing_settings_),
  PROTOBUF_FIELD_OFFSET(::TCProto::TransportRouter, graph_),
  PROTOBUF_FIELD_OFFSET(::TCProto::TransportRouter, router_),
  PROTOBUF_FIELD_OFFSET(::TCProto::TransportRouter, stops_vertex_ids_),
  PROTOBUF_FIELD_OFFSET(::TCProto::TransportRouter, vertices_info_),
  PROTOBUF_FIELD_OFFSET(::TCProto::TransportRouter, edges_info_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::TCProto::RoutingSettings)},
  { 8, -1, sizeof(::TCProto::StopVertexIds)},
  { 16, -1, sizeof(::TCProto::VertexInfo)},
  { 22, -1, sizeof(::TCProto::BusEdgeInfo)},
  { 31, -1, sizeof(::TCProto::WaitEdgeInfo)},
  { 36, -1, sizeof(::TCProto::EdgeInfo)},
  { 44, -1, sizeof(::TCProto::TransportRouter)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TCProto::_RoutingSettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TCProto::_StopVertexIds_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TCProto::_VertexInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TCProto::_BusEdgeInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TCProto::_WaitEdgeInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TCProto::_EdgeInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TCProto::_TransportRouter_default_instance_),
};

const char descriptor_table_protodef_transport_5frouter_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026transport_router.proto\022\007TCProto\032\013graph"
  ".proto\"[\n\017RoutingSettings\022\025\n\rbus_wait_ti"
  "me\030\001 \001(\005\022\024\n\014bus_velocity\030\002 \001(\001\022\033\n\023pedest"
  "rian_velocity\030\003 \001(\001\"6\n\rStopVertexIds\022\014\n\004"
  "name\030\001 \001(\t\022\n\n\002in\030\002 \001(\r\022\013\n\003out\030\003 \001(\r\"\037\n\nV"
  "ertexInfo\022\021\n\tstop_name\030\001 \001(\t\"d\n\013BusEdgeI"
  "nfo\022\020\n\010bus_name\030\001 \001(\t\022\026\n\016start_stop_idx\030"
  "\002 \001(\r\022\027\n\017finish_stop_idx\030\003 \001(\r\022\022\n\nspan_c"
  "ount\030\004 \001(\r\"\016\n\014WaitEdgeInfo\"h\n\010EdgeInfo\022("
  "\n\010bus_data\030\001 \001(\0132\024.TCProto.BusEdgeInfoH\000"
  "\022*\n\twait_data\030\002 \001(\0132\025.TCProto.WaitEdgeIn"
  "foH\000B\006\n\004data\"\240\002\n\017TransportRouter\0222\n\020rout"
  "ing_settings\030\001 \001(\0132\030.TCProto.RoutingSett"
  "ings\0220\n\005graph\030\002 \001(\0132!.GraphProto.Directe"
  "dWeightedGraph\022\"\n\006router\030\003 \001(\0132\022.GraphPr"
  "oto.Router\0220\n\020stops_vertex_ids\030\004 \003(\0132\026.T"
  "CProto.StopVertexIds\022*\n\rvertices_info\030\005 "
  "\003(\0132\023.TCProto.VertexInfo\022%\n\nedges_info\030\006"
  " \003(\0132\021.TCProto.EdgeInfob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_transport_5frouter_2eproto_deps[1] = {
  &::descriptor_table_graph_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_transport_5frouter_2eproto_sccs[7] = {
  &scc_info_BusEdgeInfo_transport_5frouter_2eproto.base,
  &scc_info_EdgeInfo_transport_5frouter_2eproto.base,
  &scc_info_RoutingSettings_transport_5frouter_2eproto.base,
  &scc_info_StopVertexIds_transport_5frouter_2eproto.base,
  &scc_info_TransportRouter_transport_5frouter_2eproto.base,
  &scc_info_VertexInfo_transport_5frouter_2eproto.base,
  &scc_info_WaitEdgeInfo_transport_5frouter_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_transport_5frouter_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transport_5frouter_2eproto = {
  false, false, descriptor_table_protodef_transport_5frouter_2eproto, "transport_router.proto", 751,
  &descriptor_table_transport_5frouter_2eproto_once, descriptor_table_transport_5frouter_2eproto_sccs, descriptor_table_transport_5frouter_2eproto_deps, 7, 1,
  schemas, file_default_instances, TableStruct_transport_5frouter_2eproto::offsets,
  file_level_metadata_transport_5frouter_2eproto, 7, file_level_enum_descriptors_transport_5frouter_2eproto, file_level_service_descriptors_transport_5frouter_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_transport_5frouter_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_transport_5frouter_2eproto)), true);
namespace TCProto {

// ===================================================================

class RoutingSettings::_Internal {
 public:
};

RoutingSettings::RoutingSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TCProto.RoutingSettings)
}
RoutingSettings::RoutingSettings(const RoutingSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&bus_velocity_, &from.bus_velocity_,
    static_cast<size_t>(reinterpret_cast<char*>(&bus_wait_time_) -
    reinterpret_cast<char*>(&bus_velocity_)) + sizeof(bus_wait_time_));
  // @@protoc_insertion_point(copy_constructor:TCProto.RoutingSettings)
}

void RoutingSettings::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&bus_velocity_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&bus_wait_time_) -
      reinterpret_cast<char*>(&bus_velocity_)) + sizeof(bus_wait_time_));
}

RoutingSettings::~RoutingSettings() {
  // @@protoc_insertion_point(destructor:TCProto.RoutingSettings)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RoutingSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RoutingSettings::ArenaDtor(void* object) {
  RoutingSettings* _this = reinterpret_cast< RoutingSettings* >(object);
  (void)_this;
}
void RoutingSettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoutingSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoutingSettings& RoutingSettings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoutingSettings_transport_5frouter_2eproto.base);
  return *internal_default_instance();
}


void RoutingSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:TCProto.RoutingSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&bus_velocity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bus_wait_time_) -
      reinterpret_cast<char*>(&bus_velocity_)) + sizeof(bus_wait_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoutingSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 bus_wait_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          bus_wait_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double bus_velocity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          bus_velocity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double pedestrian_velocity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          pedestrian_velocity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoutingSettings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TCProto.RoutingSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 bus_wait_time = 1;
  if (this->bus_wait_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_bus_wait_time(), target);
  }

  // double bus_velocity = 2;
  if (!(this->bus_velocity() <= 0 && this->bus_velocity() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_bus_velocity(), target);
  }

  // double pedestrian_velocity = 3;
  if (!(this->pedestrian_velocity() <= 0 && this->pedestrian_velocity() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_pedestrian_velocity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TCProto.RoutingSettings)
  return target;
}

size_t RoutingSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TCProto.RoutingSettings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double bus_velocity = 2;
  if (!(this->bus_velocity() <= 0 && this->bus_velocity() >= 0)) {
    total_size += 1 + 8;
  }

  // double pedestrian_velocity = 3;
  if (!(this->pedestrian_velocity() <= 0 && this->pedestrian_velocity() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 bus_wait_time = 1;
  if (this->bus_wait_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bus_wait_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoutingSettings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TCProto.RoutingSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const RoutingSettings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoutingSettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TCProto.RoutingSettings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TCProto.RoutingSettings)
    MergeFrom(*source);
  }
}

void RoutingSettings::MergeFrom(const RoutingSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TCProto.RoutingSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.bus_velocity() <= 0 && from.bus_velocity() >= 0)) {
    _internal_set_bus_velocity(from._internal_bus_velocity());
  }
  if (!(from.pedestrian_velocity() <= 0 && from.pedestrian_velocity() >= 0)) {
    _internal_set_pedestrian_velocity(from._internal_pedestrian_velocity());
  }
  if (from.bus_wait_time() != 0) {
    _internal_set_bus_wait_time(from._internal_bus_wait_time());
  }
}

void RoutingSettings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TCProto.RoutingSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoutingSettings::CopyFrom(const RoutingSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TCProto.RoutingSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutingSettings::IsInitialized() const {
  return true;
}

void RoutingSettings::InternalSwap(RoutingSettings* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoutingSettings, bus_wait_time_)
      + sizeof(RoutingSettings::bus_wait_time_)
      - PROTOBUF_FIELD_OFFSET(RoutingSettings, bus_velocity_)>(
          reinterpret_cast<char*>(&bus_velocity_),
          reinterpret_cast<char*>(&other->bus_velocity_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoutingSettings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StopVertexIds::_Internal {
 public:
};

StopVertexIds::StopVertexIds(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TCProto.StopVertexIds)
}
StopVertexIds::StopVertexIds(const StopVertexIds& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ::memcpy(&in_, &from.in_,
    static_cast<size_t>(reinterpret_cast<char*>(&out_) -
    reinterpret_cast<char*>(&in_)) + sizeof(out_));
  // @@protoc_insertion_point(copy_constructor:TCProto.StopVertexIds)
}

void StopVertexIds::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StopVertexIds_transport_5frouter_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&in_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&out_) -
      reinterpret_cast<char*>(&in_)) + sizeof(out_));
}

StopVertexIds::~StopVertexIds() {
  // @@protoc_insertion_point(destructor:TCProto.StopVertexIds)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StopVertexIds::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StopVertexIds::ArenaDtor(void* object) {
  StopVertexIds* _this = reinterpret_cast< StopVertexIds* >(object);
  (void)_this;
}
void StopVertexIds::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StopVertexIds::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StopVertexIds& StopVertexIds::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StopVertexIds_transport_5frouter_2eproto.base);
  return *internal_default_instance();
}


void StopVertexIds::Clear() {
// @@protoc_insertion_point(message_clear_start:TCProto.StopVertexIds)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  ::memset(&in_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&out_) -
      reinterpret_cast<char*>(&in_)) + sizeof(out_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StopVertexIds::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TCProto.StopVertexIds.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 in = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          in_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 out = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          out_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StopVertexIds::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TCProto.StopVertexIds)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TCProto.StopVertexIds.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // uint32 in = 2;
  if (this->in() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_in(), target);
  }

  // uint32 out = 3;
  if (this->out() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_out(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TCProto.StopVertexIds)
  return target;
}

size_t StopVertexIds::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TCProto.StopVertexIds)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint32 in = 2;
  if (this->in() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_in());
  }

  // uint32 out = 3;
  if (this->out() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_out());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopVertexIds::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TCProto.StopVertexIds)
  GOOGLE_DCHECK_NE(&from, this);
  const StopVertexIds* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StopVertexIds>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TCProto.StopVertexIds)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TCProto.StopVertexIds)
    MergeFrom(*source);
  }
}

void StopVertexIds::MergeFrom(const StopVertexIds& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TCProto.StopVertexIds)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.in() != 0) {
    _internal_set_in(from._internal_in());
  }
  if (from.out() != 0) {
    _internal_set_out(from._internal_out());
  }
}

void StopVertexIds::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TCProto.StopVertexIds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopVertexIds::CopyFrom(const StopVertexIds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TCProto.StopVertexIds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopVertexIds::IsInitialized() const {
  return true;
}

void StopVertexIds::InternalSwap(StopVertexIds* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StopVertexIds, out_)
      + sizeof(StopVertexIds::out_)
      - PROTOBUF_FIELD_OFFSET(StopVertexIds, in_)>(
          reinterpret_cast<char*>(&in_),
          reinterpret_cast<char*>(&other->in_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StopVertexIds::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VertexInfo::_Internal {
 public:
};

VertexInfo::VertexInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TCProto.VertexInfo)
}
VertexInfo::VertexInfo(const VertexInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  stop_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_stop_name().empty()) {
    stop_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stop_name(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:TCProto.VertexInfo)
}

void VertexInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VertexInfo_transport_5frouter_2eproto.base);
  stop_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

VertexInfo::~VertexInfo() {
  // @@protoc_insertion_point(destructor:TCProto.VertexInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VertexInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  stop_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VertexInfo::ArenaDtor(void* object) {
  VertexInfo* _this = reinterpret_cast< VertexInfo* >(object);
  (void)_this;
}
void VertexInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VertexInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VertexInfo& VertexInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VertexInfo_transport_5frouter_2eproto.base);
  return *internal_default_instance();
}


void VertexInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:TCProto.VertexInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stop_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VertexInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string stop_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_stop_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TCProto.VertexInfo.stop_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VertexInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TCProto.VertexInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string stop_name = 1;
  if (this->stop_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stop_name().data(), static_cast<int>(this->_internal_stop_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TCProto.VertexInfo.stop_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_stop_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TCProto.VertexInfo)
  return target;
}

size_t VertexInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TCProto.VertexInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string stop_name = 1;
  if (this->stop_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stop_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VertexInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TCProto.VertexInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const VertexInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VertexInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TCProto.VertexInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TCProto.VertexInfo)
    MergeFrom(*source);
  }
}

void VertexInfo::MergeFrom(const VertexInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TCProto.VertexInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.stop_name().size() > 0) {
    _internal_set_stop_name(from._internal_stop_name());
  }
}

void VertexInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TCProto.VertexInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VertexInfo::CopyFrom(const VertexInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TCProto.VertexInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VertexInfo::IsInitialized() const {
  return true;
}

void VertexInfo::InternalSwap(VertexInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  stop_name_.Swap(&other->stop_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata VertexInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BusEdgeInfo::_Internal {
 public:
};

BusEdgeInfo::BusEdgeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TCProto.BusEdgeInfo)
}
BusEdgeInfo::BusEdgeInfo(const BusEdgeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bus_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bus_name().empty()) {
    bus_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bus_name(), 
      GetArena());
  }
  ::memcpy(&start_stop_idx_, &from.start_stop_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&span_count_) -
    reinterpret_cast<char*>(&start_stop_idx_)) + sizeof(span_count_));
  // @@protoc_insertion_point(copy_constructor:TCProto.BusEdgeInfo)
}

void BusEdgeInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BusEdgeInfo_transport_5frouter_2eproto.base);
  bus_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&start_stop_idx_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&span_count_) -
      reinterpret_cast<char*>(&start_stop_idx_)) + sizeof(span_count_));
}

BusEdgeInfo::~BusEdgeInfo() {
  // @@protoc_insertion_point(destructor:TCProto.BusEdgeInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BusEdgeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  bus_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BusEdgeInfo::ArenaDtor(void* object) {
  BusEdgeInfo* _this = reinterpret_cast< BusEdgeInfo* >(object);
  (void)_this;
}
void BusEdgeInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BusEdgeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BusEdgeInfo& BusEdgeInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BusEdgeInfo_transport_5frouter_2eproto.base);
  return *internal_default_instance();
}


void BusEdgeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:TCProto.BusEdgeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bus_name_.ClearToEmpty();
  ::memset(&start_stop_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&span_count_) -
      reinterpret_cast<char*>(&start_stop_idx_)) + sizeof(span_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BusEdgeInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string bus_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_bus_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TCProto.BusEdgeInfo.bus_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 start_stop_idx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          start_stop_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 finish_stop_idx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          finish_stop_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 span_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          span_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BusEdgeInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TCProto.BusEdgeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string bus_name = 1;
  if (this->bus_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bus_name().data(), static_cast<int>(this->_internal_bus_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TCProto.BusEdgeInfo.bus_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_bus_name(), target);
  }

  // uint32 start_stop_idx = 2;
  if (this->start_stop_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_start_stop_idx(), target);
  }

  // uint32 finish_stop_idx = 3;
  if (this->finish_stop_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_finish_stop_idx(), target);
  }

  // uint32 span_count = 4;
  if (this->span_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_span_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TCProto.BusEdgeInfo)
  return target;
}

size_t BusEdgeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TCProto.BusEdgeInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string bus_name = 1;
  if (this->bus_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bus_name());
  }

  // uint32 start_stop_idx = 2;
  if (this->start_stop_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_start_stop_idx());
  }

  // uint32 finish_stop_idx = 3;
  if (this->finish_stop_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_finish_stop_idx());
  }

  // uint32 span_count = 4;
  if (this->span_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_span_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BusEdgeInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TCProto.BusEdgeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BusEdgeInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BusEdgeInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TCProto.BusEdgeInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TCProto.BusEdgeInfo)
    MergeFrom(*source);
  }
}

void BusEdgeInfo::MergeFrom(const BusEdgeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TCProto.BusEdgeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bus_name().size() > 0) {
    _internal_set_bus_name(from._internal_bus_name());
  }
  if (from.start_stop_idx() != 0) {
    _internal_set_start_stop_idx(from._internal_start_stop_idx());
  }
  if (from.finish_stop_idx() != 0) {
    _internal_set_finish_stop_idx(from._internal_finish_stop_idx());
  }
  if (from.span_count() != 0) {
    _internal_set_span_count(from._internal_span_count());
  }
}

void BusEdgeInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TCProto.BusEdgeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BusEdgeInfo::CopyFrom(const BusEdgeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TCProto.BusEdgeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BusEdgeInfo::IsInitialized() const {
  return true;
}

void BusEdgeInfo::InternalSwap(BusEdgeInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  bus_name_.Swap(&other->bus_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BusEdgeInfo, span_count_)
      + sizeof(BusEdgeInfo::span_count_)
      - PROTOBUF_FIELD_OFFSET(BusEdgeInfo, start_stop_idx_)>(
          reinterpret_cast<char*>(&start_stop_idx_),
          reinterpret_cast<char*>(&other->start_stop_idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BusEdgeInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WaitEdgeInfo::_Internal {
 public:
};

WaitEdgeInfo::WaitEdgeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TCProto.WaitEdgeInfo)
}
WaitEdgeInfo::WaitEdgeInfo(const WaitEdgeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TCProto.WaitEdgeInfo)
}

void WaitEdgeInfo::SharedCtor() {
}

WaitEdgeInfo::~WaitEdgeInfo() {
  // @@protoc_insertion_point(destructor:TCProto.WaitEdgeInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WaitEdgeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void WaitEdgeInfo::ArenaDtor(void* object) {
  WaitEdgeInfo* _this = reinterpret_cast< WaitEdgeInfo* >(object);
  (void)_this;
}
void WaitEdgeInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WaitEdgeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WaitEdgeInfo& WaitEdgeInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WaitEdgeInfo_transport_5frouter_2eproto.base);
  return *internal_default_instance();
}


void WaitEdgeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:TCProto.WaitEdgeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WaitEdgeInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WaitEdgeInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TCProto.WaitEdgeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TCProto.WaitEdgeInfo)
  return target;
}

size_t WaitEdgeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TCProto.WaitEdgeInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WaitEdgeInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TCProto.WaitEdgeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const WaitEdgeInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WaitEdgeInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TCProto.WaitEdgeInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TCProto.WaitEdgeInfo)
    MergeFrom(*source);
  }
}

void WaitEdgeInfo::MergeFrom(const WaitEdgeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TCProto.WaitEdgeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void WaitEdgeInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TCProto.WaitEdgeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WaitEdgeInfo::CopyFrom(const WaitEdgeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TCProto.WaitEdgeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WaitEdgeInfo::IsInitialized() const {
  return true;
}

void WaitEdgeInfo::InternalSwap(WaitEdgeInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WaitEdgeInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EdgeInfo::_Internal {
 public:
  static const ::TCProto::BusEdgeInfo& bus_data(const EdgeInfo* msg);
  static const ::TCProto::WaitEdgeInfo& wait_data(const EdgeInfo* msg);
};

const ::TCProto::BusEdgeInfo&
EdgeInfo::_Internal::bus_data(const EdgeInfo* msg) {
  return *msg->data_.bus_data_;
}
const ::TCProto::WaitEdgeInfo&
EdgeInfo::_Internal::wait_data(const EdgeInfo* msg) {
  return *msg->data_.wait_data_;
}
void EdgeInfo::set_allocated_bus_data(::TCProto::BusEdgeInfo* bus_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (bus_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bus_data);
    if (message_arena != submessage_arena) {
      bus_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bus_data, submessage_arena);
    }
    set_has_bus_data();
    data_.bus_data_ = bus_data;
  }
  // @@protoc_insertion_point(field_set_allocated:TCProto.EdgeInfo.bus_data)
}
void EdgeInfo::set_allocated_wait_data(::TCProto::WaitEdgeInfo* wait_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_data();
  if (wait_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(wait_data);
    if (message_arena != submessage_arena) {
      wait_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wait_data, submessage_arena);
    }
    set_has_wait_data();
    data_.wait_data_ = wait_data;
  }
  // @@protoc_insertion_point(field_set_allocated:TCProto.EdgeInfo.wait_data)
}
EdgeInfo::EdgeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TCProto.EdgeInfo)
}
EdgeInfo::EdgeInfo(const EdgeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_data();
  switch (from.data_case()) {
    case kBusData: {
      _internal_mutable_bus_data()->::TCProto::BusEdgeInfo::MergeFrom(from._internal_bus_data());
      break;
    }
    case kWaitData: {
      _internal_mutable_wait_data()->::TCProto::WaitEdgeInfo::MergeFrom(from._internal_wait_data());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:TCProto.EdgeInfo)
}

void EdgeInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EdgeInfo_transport_5frouter_2eproto.base);
  clear_has_data();
}

EdgeInfo::~EdgeInfo() {
  // @@protoc_insertion_point(destructor:TCProto.EdgeInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EdgeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_data()) {
    clear_data();
  }
}

void EdgeInfo::ArenaDtor(void* object) {
  EdgeInfo* _this = reinterpret_cast< EdgeInfo* >(object);
  (void)_this;
}
void EdgeInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EdgeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EdgeInfo& EdgeInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EdgeInfo_transport_5frouter_2eproto.base);
  return *internal_default_instance();
}


void EdgeInfo::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:TCProto.EdgeInfo)
  switch (data_case()) {
    case kBusData: {
      if (GetArena() == nullptr) {
        delete data_.bus_data_;
      }
      break;
    }
    case kWaitData: {
      if (GetArena() == nullptr) {
        delete data_.wait_data_;
      }
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_NOT_SET;
}


void EdgeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:TCProto.EdgeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EdgeInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .TCProto.BusEdgeInfo bus_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_bus_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TCProto.WaitEdgeInfo wait_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_wait_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EdgeInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TCProto.EdgeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .TCProto.BusEdgeInfo bus_data = 1;
  if (_internal_has_bus_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::bus_data(this), target, stream);
  }

  // .TCProto.WaitEdgeInfo wait_data = 2;
  if (_internal_has_wait_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::wait_data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TCProto.EdgeInfo)
  return target;
}

size_t EdgeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TCProto.EdgeInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (data_case()) {
    // .TCProto.BusEdgeInfo bus_data = 1;
    case kBusData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.bus_data_);
      break;
    }
    // .TCProto.WaitEdgeInfo wait_data = 2;
    case kWaitData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.wait_data_);
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EdgeInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TCProto.EdgeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const EdgeInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EdgeInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TCProto.EdgeInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TCProto.EdgeInfo)
    MergeFrom(*source);
  }
}

void EdgeInfo::MergeFrom(const EdgeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TCProto.EdgeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.data_case()) {
    case kBusData: {
      _internal_mutable_bus_data()->::TCProto::BusEdgeInfo::MergeFrom(from._internal_bus_data());
      break;
    }
    case kWaitData: {
      _internal_mutable_wait_data()->::TCProto::WaitEdgeInfo::MergeFrom(from._internal_wait_data());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
}

void EdgeInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TCProto.EdgeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EdgeInfo::CopyFrom(const EdgeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TCProto.EdgeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EdgeInfo::IsInitialized() const {
  return true;
}

void EdgeInfo::InternalSwap(EdgeInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(data_, other->data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata EdgeInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TransportRouter::_Internal {
 public:
  static const ::TCProto::RoutingSettings& routing_settings(const TransportRouter* msg);
  static const ::GraphProto::DirectedWeightedGraph& graph(const TransportRouter* msg);
  static const ::GraphProto::Router& router(const TransportRouter* msg);
};

const ::TCProto::RoutingSettings&
TransportRouter::_Internal::routing_settings(const TransportRouter* msg) {
  return *msg->routing_settings_;
}
const ::GraphProto::DirectedWeightedGraph&
TransportRouter::_Internal::graph(const TransportRouter* msg) {
  return *msg->graph_;
}
const ::GraphProto::Router&
TransportRouter::_Internal::router(const TransportRouter* msg) {
  return *msg->router_;
}
void TransportRouter::clear_graph() {
  if (GetArena() == nullptr && graph_ != nullptr) {
    delete graph_;
  }
  graph_ = nullptr;
}
void TransportRouter::clear_router() {
  if (GetArena() == nullptr && router_ != nullptr) {
    delete router_;
  }
  router_ = nullptr;
}
TransportRouter::TransportRouter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  stops_vertex_ids_(arena),
  vertices_info_(arena),
  edges_info_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TCProto.TransportRouter)
}
TransportRouter::TransportRouter(const TransportRouter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      stops_vertex_ids_(from.stops_vertex_ids_),
      vertices_info_(from.vertices_info_),
      edges_info_(from.edges_info_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_routing_settings()) {
    routing_settings_ = new ::TCProto::RoutingSettings(*from.routing_settings_);
  } else {
    routing_settings_ = nullptr;
  }
  if (from._internal_has_graph()) {
    graph_ = new ::GraphProto::DirectedWeightedGraph(*from.graph_);
  } else {
    graph_ = nullptr;
  }
  if (from._internal_has_router()) {
    router_ = new ::GraphProto::Router(*from.router_);
  } else {
    router_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TCProto.TransportRouter)
}

void TransportRouter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransportRouter_transport_5frouter_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&routing_settings_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&router_) -
      reinterpret_cast<char*>(&routing_settings_)) + sizeof(router_));
}

TransportRouter::~TransportRouter() {
  // @@protoc_insertion_point(destructor:TCProto.TransportRouter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransportRouter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete routing_settings_;
  if (this != internal_default_instance()) delete graph_;
  if (this != internal_default_instance()) delete router_;
}

void TransportRouter::ArenaDtor(void* object) {
  TransportRouter* _this = reinterpret_cast< TransportRouter* >(object);
  (void)_this;
}
void TransportRouter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransportRouter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransportRouter& TransportRouter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransportRouter_transport_5frouter_2eproto.base);
  return *internal_default_instance();
}


void TransportRouter::Clear() {
// @@protoc_insertion_point(message_clear_start:TCProto.TransportRouter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stops_vertex_ids_.Clear();
  vertices_info_.Clear();
  edges_info_.Clear();
  if (GetArena() == nullptr && routing_settings_ != nullptr) {
    delete routing_settings_;
  }
  routing_settings_ = nullptr;
  if (GetArena() == nullptr && graph_ != nullptr) {
    delete graph_;
  }
  graph_ = nullptr;
  if (GetArena() == nullptr && router_ != nullptr) {
    delete router_;
  }
  router_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransportRouter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .TCProto.RoutingSettings routing_settings = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_routing_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GraphProto.DirectedWeightedGraph graph = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_graph(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GraphProto.Router router = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_router(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TCProto.StopVertexIds stops_vertex_ids = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stops_vertex_ids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TCProto.VertexInfo vertices_info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vertices_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TCProto.EdgeInfo edges_info = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_edges_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransportRouter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TCProto.TransportRouter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .TCProto.RoutingSettings routing_settings = 1;
  if (this->has_routing_settings()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::routing_settings(this), target, stream);
  }

  // .GraphProto.DirectedWeightedGraph graph = 2;
  if (this->has_graph()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::graph(this), target, stream);
  }

  // .GraphProto.Router router = 3;
  if (this->has_router()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::router(this), target, stream);
  }

  // repeated .TCProto.StopVertexIds stops_vertex_ids = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stops_vertex_ids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_stops_vertex_ids(i), target, stream);
  }

  // repeated .TCProto.VertexInfo vertices_info = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vertices_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_vertices_info(i), target, stream);
  }

  // repeated .TCProto.EdgeInfo edges_info = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_edges_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_edges_info(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TCProto.TransportRouter)
  return target;
}

size_t TransportRouter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TCProto.TransportRouter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TCProto.StopVertexIds stops_vertex_ids = 4;
  total_size += 1UL * this->_internal_stops_vertex_ids_size();
  for (const auto& msg : this->stops_vertex_ids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TCProto.VertexInfo vertices_info = 5;
  total_size += 1UL * this->_internal_vertices_info_size();
  for (const auto& msg : this->vertices_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TCProto.EdgeInfo edges_info = 6;
  total_size += 1UL * this->_internal_edges_info_size();
  for (const auto& msg : this->edges_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .TCProto.RoutingSettings routing_settings = 1;
  if (this->has_routing_settings()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *routing_settings_);
  }

  // .GraphProto.DirectedWeightedGraph graph = 2;
  if (this->has_graph()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *graph_);
  }

  // .GraphProto.Router router = 3;
  if (this->has_router()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *router_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransportRouter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TCProto.TransportRouter)
  GOOGLE_DCHECK_NE(&from, this);
  const TransportRouter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransportRouter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TCProto.TransportRouter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TCProto.TransportRouter)
    MergeFrom(*source);
  }
}

void TransportRouter::MergeFrom(const TransportRouter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TCProto.TransportRouter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stops_vertex_ids_.MergeFrom(from.stops_vertex_ids_);
  vertices_info_.MergeFrom(from.vertices_info_);
  edges_info_.MergeFrom(from.edges_info_);
  if (from.has_routing_settings()) {
    _internal_mutable_routing_settings()->::TCProto::RoutingSettings::MergeFrom(from._internal_routing_settings());
  }
  if (from.has_graph()) {
    _internal_mutable_graph()->::GraphProto::DirectedWeightedGraph::MergeFrom(from._internal_graph());
  }
  if (from.has_router()) {
    _internal_mutable_router()->::GraphProto::Router::MergeFrom(from._internal_router());
  }
}

void TransportRouter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TCProto.TransportRouter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransportRouter::CopyFrom(const TransportRouter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TCProto.TransportRouter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransportRouter::IsInitialized() const {
  return true;
}

void TransportRouter::InternalSwap(TransportRouter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  stops_vertex_ids_.InternalSwap(&other->stops_vertex_ids_);
  vertices_info_.InternalSwap(&other->vertices_info_);
  edges_info_.InternalSwap(&other->edges_info_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransportRouter, router_)
      + sizeof(TransportRouter::router_)
      - PROTOBUF_FIELD_OFFSET(TransportRouter, routing_settings_)>(
          reinterpret_cast<char*>(&routing_settings_),
          reinterpret_cast<char*>(&other->routing_settings_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransportRouter::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace TCProto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TCProto::RoutingSettings* Arena::CreateMaybeMessage< ::TCProto::RoutingSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TCProto::RoutingSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::TCProto::StopVertexIds* Arena::CreateMaybeMessage< ::TCProto::StopVertexIds >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TCProto::StopVertexIds >(arena);
}
template<> PROTOBUF_NOINLINE ::TCProto::VertexInfo* Arena::CreateMaybeMessage< ::TCProto::VertexInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TCProto::VertexInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::TCProto::BusEdgeInfo* Arena::CreateMaybeMessage< ::TCProto::BusEdgeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TCProto::BusEdgeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::TCProto::WaitEdgeInfo* Arena::CreateMaybeMessage< ::TCProto::WaitEdgeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TCProto::WaitEdgeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::TCProto::EdgeInfo* Arena::CreateMaybeMessage< ::TCProto::EdgeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TCProto::EdgeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::TCProto::TransportRouter* Arena::CreateMaybeMessage< ::TCProto::TransportRouter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TCProto::TransportRouter >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
